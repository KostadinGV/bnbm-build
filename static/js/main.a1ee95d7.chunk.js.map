{"version":3,"sources":["state/application/hooks.ts","utils/provider.ts","utils/formatBalance.ts","bnbm-finance/ERC20.ts","bnbm-finance/BnbmFinance.ts","contexts/BnbmFinanceProvider/BnbmFinanceProvider.tsx","hooks/useBnbmFinance.ts","contexts/Banks/context.ts","contexts/Banks/Banks.tsx","config.ts","contexts/Modals/Modals.tsx","contexts/RefreshContext/RefreshContextProvider.tsx","state/application/actions.ts","hooks/useNetworkPrompt.ts","state/transactions/reducer.ts","state/application/reducer.ts","state/index.ts","theme/colors.ts","theme/index.ts","newTheme.js","hooks/useIsWindowVisible.ts","state/application/updater.ts","hooks/useDebounce.ts","state/transactions/updater.tsx","state/Updaters.tsx","components/Loader/index.js","components/Loader/Loader.js","components/Popups/TransactionPopup.tsx","components/Popups/ErrorPopup.tsx","components/Popups/PopupItem.tsx","components/Popups/index.tsx","App.tsx","serviceWorker.js","index.tsx","utils/constants.ts","bnbm-finance/config.ts","bnbm-finance/ether-utils.ts","state/transactions/actions.ts"],"names":["useBlockNumber","chainId","useWallet","useSelector","state","application","blockNumber","useAddPopup","dispatch","useDispatch","useCallback","content","key","addPopup","useRemovePopup","removePopup","useActivePopups","list","popupList","useMemo","filter","item","show","provider","getDefaultProvider","ethers","providers","Web3Provider","web3ProviderFrom","config","defaultProvider","getDisplayBalance","balance","decimals","fractionDigits","isTruncated","number","getBalance","ret","toFixed","length","slice","getFullDisplayBalance","Number","div","BigNumber","from","pow","ERC20","address","symbol","decimal","contract","this","Contract","ABI","signerOrProvider","estimateGas","totalSupply","account","balanceOf","recipient","amount","transfer","owner","spender","allowance","approve","sender","transferFrom","a","formatUnits","supply","inputs","internalType","name","type","stateMutability","anonymous","indexed","outputs","BnbmFinance","cfg","myAccount","signer","contracts","externalTokens","heavenVersionOfUser","BNBMWBNB_LP","BNBM","SBNB","BBNB","XBNBM","BNB","BTC","deployments","Object","entries","deployment","abi","Bnbm","SBnb","BBnb","xBNBM","IUniswapV2PairABI","newProvider","getSigner","connect","tokens","values","fetchHeavenVersionOfUser","then","version","catch","err","console","error","stack","BnbmRewardPool","BnbmGenesisRewardPool","bnbmRewardPoolSupply","bnbmRewardPoolSupply2","bnbmCirculatingSupply","sub","getTokenPriceFromPancakeswapBTC","priceInBTC","getWBNBPriceFromPancakeswap","priceOfOneBNB","priceOfBnbmInDollars","tokenInFtm","toString","priceInDollars","circulatingSupply","getBTCBPriceFromPancakeswap","lpToken","lpTokenSupplyBN","lpTokenSupply","token0","startsWith","isBnbm","tokenAmountBN","tokenAmount","ftmAmountBN","ftmAmount","tokenAmountInOneLP","ftmAmountInOneLP","getLPTokenPrice","lpTokenPrice","lpTokenPriceFixed","liquidity","priceOfOne","totalLiquidity","btcAmountBN","btcAmount","Treasury","getBnbmStat","bnbmStat","getBondPremiumRate","bondBnbmRatioBN","modifier","bondPriceInBNB","priceOfBBnbInDollars","displayedTotalSupply","CarRewardPool","getTokenPriceFromPancakeswap","priceInBNB","cabCirculatingSupply","priceOfSharesInDollars","Oracle","twap","utils","parseEther","expectedPrice","getBnbmUpdatedPrice","getBurnableBnbmLeft","bank","undefined","depositToken","poolContract","getDepositTokenPriceInDollars","depositTokenName","depositTokenPrice","stakeInPool","TVL","earnTokenName","getShareStat","stat","getTokenPerSecond","tokenPerSecond","tokenPerHour","mul","totalRewardPricePerYear","totalRewardPricePerDay","totalStakingTokenInPool","dailyAPR","yearlyAPR","bnbmToken","xbnbmToken","getXbnbmExchange","xbnbmExchange","xbnbmPercent","xbnbmPercentTotal","startDate","Date","nowDate","now","difference","getTime","aprPerDay","contractName","endsWith","bnbmPerSecond","rewardPerSecond","poolStartTime","startDateTime","toNumber","epochBnbmPerSecond","cabPerSecond","tokenName","token","priceOfOneFtmInDollars","tokenPrice","getApeLPTokenPrice","epoch","getBnbmPrice","treasuryBnbmPrice","buyBonds","decimalToBalance","priceForBnbm","redeemBonds","totalValue","bankDefinitions","bankInfo","pool","tokenAmountInPool","value","poolValue","isNaN","SBNBPrice","BNBMPrice","currentHeaven","heavencabBalanceOf","bnbmStakeBalanceOf","heavenTVL","bnbmTVL","tokenSupply","priceOfToken","tokenInLP","poolName","poolId","pendingBNBM","pendingShare","userInfo","deposit","withdraw","Heaven","tokenContract","ready","WBNB","wftm","Token","Fetcher","fetchPairData","wftmToToken","priceInBUSD","Route","midPrice","wbnb","wBNBToToken","priceForPeg","FUSDT","fusdt_wftm_lp_pair","ftm_amount_BN","ftm_amount","fusdt_amount_BN","fusdt_amount","BTCB","btcPriceInBNB","wbnbPrice","btcprice","latestSnapshotIndex","heavenHistory","lastHistory","lastRewardsReceived","amountOfRewardsPerDay","realAPR","xBnbmBnbmBalanceOf","canClaimReward","canWithdraw","getStakedSharesOnHeaven","stakedAmount","notStaked","result","isOldHeavenMember","Error","stake","Xbnbm","enter","getShareOf","bnbm","getExchangeRate","XbnbmExchange","xBnbmPerBnbm","parseFloat","xBnbmRate","parseUnits","leave","getCashEarningsOf","earned","claimDividends","claimReward","exit","nextEpochPoint","nextEpochTimestamp","nextAllocation","prevAllocation","to","currentEpoch","members","mason","startTimeEpoch","epochTimerStart","PERIOD","period","periodInHours","rewardLockupEpochs","targetEpochForClaimUnlock","fromDate","toDate","delta","endDate","moment","add","PeriodInHours","withdrawLockupEpochs","assetName","host","window","location","origin","ethereum","networkVersion","asset","assetUrl","imageURL","log","request","method","params","options","image","bnbmAmount","TaxOffice","overrides","addLiquidityETHTaxFree","SpookyRouter","getReserves","_reserve0","_reserve1","quote","treasuryDaoFundedFilter","filters","DaoFundFunded","treasuryDevFundedFilter","DevFundFunded","treasuryHeavenFundedFilter","HeavenFunded","boughtBondsFilter","BoughtBonds","redeemBondsFilter","RedeemedBonds","epochBlocksRanges","queryFilter","heavenFundEvents","events","forEach","index","push","heavenFund","args","startBlock","boughBonds","redeemedBonds","endBlock","getBondsWithFilterForPeriod","bondsBought","bondsRedeemed","devFund","daoFund","bondsAmount","lpName","zapper","BNB_TICKER","estimateZapIn","SPOOKY_ROUTER_ADDR","estimate","BNBM_TICKER","estimateZapInToken","zapIn","zapInToken","bbondAmount","CarSwapper","swapBBnbToCar","estimateAmountOfCar","estimateBN","getCarBalance","carBalanceBN","getBBnbBalance","bbondBalanceBN","getCarAmountPerBnbm","rateCarPerBnbmBN","carBalance","bbondBalance","rateCarPerBnbm","Context","createContext","bnbmFinance","BnbmFinanceProvider","children","useState","setBnbmFinance","useEffect","unlockWallet","Provider","useBnbmFinance","useContext","context","banks","Banks","setBanks","isUnlocked","fetchPools","finished","stakedBalanceOnBank","lte","earnToken","sort","b","configurations","development","networkName","ftmscanUrl","require","BUSD","FTM","ETH","USDC","DOGE","SHIB","baseLaunchDate","bondLaunchesAt","heavenLaunchesAt","refreshInterval","production","BnbmWBNBGenesisRewardPool","sectionInUI","closedForStaking","fee","alloc","BnbmBnbLPBnbmRewardPool","BNBMLPBNBSPOOL","BNBSLPBNBSPOOL","onPresent","onDismiss","StyledModalWrapper","styled","StyledModalBackdrop","Modals","isOpen","setIsOpen","setContent","handlePresent","modalContent","handleDismiss","onClick","React","isValidElement","cloneElement","RefreshContext","slow","fast","RefreshContextProvider","setSlow","setFast","interval","setInterval","prev","clearInterval","updateBlockNumber","createAction","toggleWalletModal","toggleSettingsMenu","usePromptNetwork","networkPrompt","setNetworkPrompt","connectToNetwork","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","createReducer","builder","addCase","addTransaction","transactions","payload","hash","approval","summary","txs","addedTime","clearAllTransactions","checkedTransaction","tx","lastCheckedBlockNumber","Math","max","finalizeTransaction","receipt","confirmedTime","walletModalOpen","settingsMenuOpen","action","removeAfterMs","popup","concat","nanoid","p","PERSISTED_KEYS","store","configureStore","reducer","middleware","getDefaultMiddleware","thunk","save","states","preloadedState","load","teal","200","theme","borderRadius","color","black","grey","100","300","400","500","600","700","800","900","yellow","primary","light","main","secondary","white","newNavy","siteWidth","spacing","1","2","3","4","5","6","7","topBarSize","newTheme","createTheme","palette","text","background","default","paper","dark","contrastText","disabledBackground","active","hover","typography","fontFamily","VISIBILITY_STATE_SUPPORTED","document","isWindowVisible","visibilityState","Updater","windowVisible","focused","setFocused","listener","addEventListener","removeEventListener","useIsWindowVisible","setState","blockNumberCallback","getBlockNumber","on","removeListener","debouncedState","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","lastBlockNumber","keys","blocksSinceCheck","minutesPending","shouldCheck","getTransactionReceipt","blockHash","contractAddress","status","transactionHash","transactionIndex","txn","success","Updaters","Loader","style","position","left","top","transform","Typography","RowNoFlex","TransactionPopup","ThemeContext","paddingRight","size","StyledPopupDesc","StyledLink","target","href","span","props","ErrorPopup","message","copyErrorDetails","navigator","clipboard","writeText","StyledClose","X","Popup","Fader","AnimatedFader","animated","PopupItem","popKey","removeThisPopup","timeout","popupContent","faderStyle","useSpring","width","duration","text2","MobilePopupWrapper","height","MobilePopupInner","FixedPopupColumn","Popups","activePopups","map","reverse","Home","lazy","Moon","Bond","NoMatch","Providers","connectors","walletconnect","rpcUrl","walletlink","url","appName","appLogoUrl","App","localStorage","version_app","clear","setItem","fallback","exact","path","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","registration","unregister","SBNB_TICKER","BTC_TICKER","ZAPPER_ROUTER_ADDR","TAX_OFFICE_ADDR","defaultEthereumConfig","testing","autoGasMultiplier","defaultConfirmations","defaultGas","defaultGasPrice","ethereumNodeTimeout","endpoint","ethConfig","assign","includes","Web3","WebsocketProvider","HttpProvider","d","String"],"mappings":"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","file":"static/js/main.a1ee95d7.chunk.js","sourcesContent":["import {useCallback, useMemo} from 'react';\r\nimport {addPopup, PopupContent, removePopup, toggleWalletModal, toggleSettingsMenu} from './actions';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport {AppState} from '../index';\r\nimport {useWallet} from 'use-wallet';\r\n\r\nexport function useBlockNumber(): number | undefined {\r\n  const {chainId} = useWallet();\r\n  return useSelector((state: AppState) => state.application.blockNumber[chainId ?? -1]);\r\n}\r\n\r\nexport function useWalletModalOpen(): boolean {\r\n  return useSelector((state: AppState) => state.application.walletModalOpen);\r\n}\r\n\r\nexport function useWalletModalToggle(): () => void {\r\n  const dispatch = useDispatch();\r\n  return useCallback(() => dispatch(toggleWalletModal()), [dispatch]);\r\n}\r\n\r\nexport function useSettingsMenuOpen(): boolean {\r\n  return useSelector((state: AppState) => state.application.settingsMenuOpen);\r\n}\r\n\r\nexport function useToggleSettingsMenu(): () => void {\r\n  const dispatch = useDispatch();\r\n  return useCallback(() => dispatch(toggleSettingsMenu()), [dispatch]);\r\n}\r\n\r\n// returns a function that allows adding a popup\r\nexport function useAddPopup(): (content: PopupContent, key?: string) => void {\r\n  const dispatch = useDispatch();\r\n\r\n  return useCallback(\r\n    (content: PopupContent, key?: string) => {\r\n      dispatch(addPopup({content, key}));\r\n    },\r\n    [dispatch],\r\n  );\r\n}\r\n\r\n// returns a function that allows removing a popup via its key\r\nexport function useRemovePopup(): (key: string) => void {\r\n  const dispatch = useDispatch();\r\n  return useCallback(\r\n    (key: string) => {\r\n      dispatch(removePopup({key}));\r\n    },\r\n    [dispatch],\r\n  );\r\n}\r\n\r\n// get the list of active popups\r\nexport function useActivePopups(): AppState['application']['popupList'] {\r\n  const list = useSelector((state: AppState) => state.application.popupList);\r\n  return useMemo(() => list.filter((item) => item.show), [list]);\r\n}\r\n","import {ethers} from 'ethers';\r\nimport config from '../config';\r\nimport {web3ProviderFrom} from '../bnbm-finance/ether-utils';\r\n\r\nlet provider: ethers.providers.Web3Provider = null;\r\n\r\nexport function getDefaultProvider(): ethers.providers.Web3Provider {\r\n  if (!provider) {\r\n    provider = new ethers.providers.Web3Provider(web3ProviderFrom(config.defaultProvider), config.chainId);\r\n  }\r\n\r\n  return provider;\r\n}\r\n","import {BigNumber} from 'ethers';\r\n\r\nexport const getDisplayBalance = (\r\n  balance: BigNumber,\r\n  decimals = 18,\r\n  fractionDigits = 4,\r\n  isTruncated: boolean = false,\r\n) => {\r\n  if (decimals === 0) {\r\n    fractionDigits = 0;\r\n  }\r\n  const number = getBalance(balance, decimals - fractionDigits);\r\n  const ret = (number / 10 ** fractionDigits).toFixed(fractionDigits);\r\n  if (ret.length > 12 && isTruncated) {\r\n    return ret.slice(0, 12) + '...';\r\n  }\r\n  return ret;\r\n};\r\n\r\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18, isTruncated = false) => {\r\n  return getDisplayBalance(balance, decimals, 4, isTruncated);\r\n};\r\n\r\nexport function getBalance(balance: BigNumber, decimals = 18): number {\r\n  return Number(balance.div(BigNumber.from(10).pow(decimals)));\r\n}\r\n","import {BigNumber, Contract} from 'ethers';\r\nimport {Signer} from '@ethersproject/abstract-signer';\r\nimport {Provider} from '@ethersproject/abstract-provider';\r\nimport {TransactionResponse} from '@ethersproject/providers';\r\nimport {formatUnits} from 'ethers/lib/utils';\r\n\r\nclass ERC20 {\r\n  private contract: Contract;\r\n\r\n  address: string;\r\n  symbol: string;\r\n  decimal: number;\r\n\r\n  constructor(address: string, provider: Signer | Provider, symbol: string, decimal = 18) {\r\n    this.contract = new Contract(address, ABI, provider);\r\n    this.address = address;\r\n    this.symbol = symbol;\r\n    this.decimal = decimal;\r\n  }\r\n\r\n  connect(signerOrProvider: Signer | Provider) {\r\n    this.contract = new Contract(this.address, ABI, signerOrProvider);\r\n  }\r\n\r\n  get estimateGas() {\r\n    return this.contract.estimateGas;\r\n  }\r\n\r\n  totalSupply(): Promise<BigNumber> {\r\n    return this.contract.totalSupply();\r\n  }\r\n\r\n  balanceOf(account: string): Promise<BigNumber> {\r\n    return this.contract.balanceOf(account);\r\n  }\r\n\r\n  transfer(recipient: string, amount: BigNumber): Promise<TransactionResponse> {\r\n    return this.contract.transfer(recipient, amount);\r\n  }\r\n\r\n  allowance(owner: string, spender: string): Promise<BigNumber> {\r\n    return this.contract.allowance(owner, spender);\r\n  }\r\n\r\n  approve(spender: string, amount: BigNumber): Promise<TransactionResponse> {\r\n    return this.contract.approve(spender, amount);\r\n  }\r\n\r\n  transferFrom(sender: string, recipient: string, amount: BigNumber): Promise<TransactionResponse> {\r\n    return this.contract.transferFrom(sender, recipient, amount);\r\n  }\r\n\r\n  async displayedBalanceOf(account: string): Promise<string> {\r\n    const balance = await this.balanceOf(account);\r\n    return formatUnits(balance, this.decimal);\r\n  }\r\n\r\n  async displayedTotalSupply(): Promise<string> {\r\n    const supply = await this.totalSupply();\r\n    return Number(formatUnits(supply, this.decimal)).toFixed(0);\r\n  }\r\n}\r\n\r\nexport default ERC20;\r\n\r\nconst ABI = [\r\n  {\r\n    inputs: [\r\n      {internalType: 'string', name: 'name', type: 'string'},\r\n      {\r\n        internalType: 'string',\r\n        name: 'symbol',\r\n        type: 'string',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'constructor',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Approval',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Transfer',\r\n    type: 'event',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'name',\r\n    outputs: [\r\n      {\r\n        internalType: 'string',\r\n        name: '',\r\n        type: 'string',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'symbol',\r\n    outputs: [\r\n      {\r\n        internalType: 'string',\r\n        name: '',\r\n        type: 'string',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'decimals',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint8',\r\n        name: '',\r\n        type: 'uint8',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'totalSupply',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'balanceOf',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'transfer',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'allowance',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'approve',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'transferFrom',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'addedValue',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'increaseAllowance',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'subtractedValue',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'decreaseAllowance',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n];\r\n","// import { Fetcher, Route, Token } from '@uniswap/sdk';\r\n//import { Fetcher as FetcherSpirit, Token as TokenSpirit } from '@spiritswap/sdk';\r\nimport {Fetcher, Route, Token} from '@pancakeswap/sdk';\r\nimport {Configuration} from './config';\r\nimport {ContractName, TokenStat, AllocationTime, LPStat, Bank, PoolStats, CarSwapperStat} from './types';\r\nimport {BigNumber, Contract, ethers, EventFilter} from 'ethers';\r\nimport {decimalToBalance} from './ether-utils';\r\nimport {TransactionResponse} from '@ethersproject/providers';\r\nimport ERC20 from './ERC20';\r\nimport {getFullDisplayBalance, getDisplayBalance} from '../utils/formatBalance';\r\nimport {getDefaultProvider} from '../utils/provider';\r\nimport IUniswapV2PairABI from './IUniswapV2Pair.abi.json';\r\nimport config, {bankDefinitions} from '../config';\r\nimport moment from 'moment';\r\nimport {parseUnits} from 'ethers/lib/utils';\r\nimport {BNB_TICKER, SPOOKY_ROUTER_ADDR, BNBM_TICKER} from '../utils/constants';\r\n// import BnbmImage from \"../src/assets/img/bnbm.png\";\r\n// import BnbmshareImage from \"../src/assets/img/cars.png\";\r\n// import BnbmBondImage from \"../src/assets/img/bnbm.png\";\r\n// import XBnbmImage from \"../src/assets/img/xbnbm.png\";\r\n/**\r\n * An API module of Bnbm Finance contracts.\r\n * All contract-interacting domain logic should be defined in here.\r\n */\r\nexport class BnbmFinance {\r\n  myAccount: string;\r\n  provider: ethers.providers.Web3Provider;\r\n  signer?: ethers.Signer;\r\n  config: Configuration;\r\n  contracts: {[name: string]: Contract};\r\n  externalTokens: {[name: string]: ERC20};\r\n  heavenVersionOfUser?: string;\r\n\r\n  BNBMWBNB_LP: Contract;\r\n  BNBM: ERC20;\r\n  SBNB: ERC20;\r\n  BBNB: ERC20;\r\n  XBNBM: ERC20;\r\n  BNB: ERC20;\r\n  BTC: ERC20;\r\n\r\n  constructor(cfg: Configuration) {\r\n    const {deployments, externalTokens} = cfg;\r\n    const provider = getDefaultProvider();\r\n\r\n    // loads contracts from deployments\r\n    this.contracts = {};\r\n    for (const [name, deployment] of Object.entries(deployments)) {\r\n      this.contracts[name] = new Contract(deployment.address, deployment.abi, provider);\r\n    }\r\n    this.externalTokens = {};\r\n    for (const [symbol, [address, decimal]] of Object.entries(externalTokens)) {\r\n      this.externalTokens[symbol] = new ERC20(address, provider, symbol, decimal);\r\n    }\r\n    this.BNBM = new ERC20(deployments.Bnbm.address, provider, 'BNBM');\r\n    this.SBNB = new ERC20(deployments.SBnb.address, provider, 'SBNB');\r\n    this.BBNB = new ERC20(deployments.BBnb.address, provider, 'BBNB');\r\n    this.BNB = this.externalTokens['WBNB'];\r\n    this.BTC = this.externalTokens['BTCB'];\r\n    this.XBNBM = new ERC20(deployments.xBNBM.address, provider, 'XBNBM');\r\n\r\n    // Uniswap V2 Pair\r\n    this.BNBMWBNB_LP = new Contract(externalTokens['BNBM-BNB-LP'][0], IUniswapV2PairABI, provider);\r\n\r\n    this.config = cfg;\r\n    this.provider = provider;\r\n  }\r\n\r\n  /**\r\n   * @param provider From an unlocked wallet. (e.g. Metamask)\r\n   * @param account An address of unlocked wallet account.\r\n   */\r\n  unlockWallet(provider: any, account: string) {\r\n    const newProvider = new ethers.providers.Web3Provider(provider, this.config.chainId);\r\n    this.signer = newProvider.getSigner(0);\r\n    this.myAccount = account;\r\n    for (const [name, contract] of Object.entries(this.contracts)) {\r\n      this.contracts[name] = contract.connect(this.signer);\r\n    }\r\n    const tokens = [this.BNBM, this.SBNB, this.BBNB, ...Object.values(this.externalTokens)];\r\n    for (const token of tokens) {\r\n      token.connect(this.signer);\r\n    }\r\n    this.BNBMWBNB_LP = this.BNBMWBNB_LP.connect(this.signer);\r\n    //console.log(`🔓 Wallet is unlocked. Welcome, ${account}!`);\r\n    this.fetchHeavenVersionOfUser()\r\n      .then((version) => (this.heavenVersionOfUser = version))\r\n      .catch((err) => {\r\n        console.error(`Failed to fetch heaven version: ${err.stack}`);\r\n        this.heavenVersionOfUser = 'latest';\r\n      });\r\n  }\r\n\r\n  get isUnlocked(): boolean {\r\n    return !!this.myAccount;\r\n  }\r\n\r\n  //===================================================================\r\n  //===================== GET ASSET STATS =============================\r\n  //===================FROM APE TO DISPLAY =========================\r\n  //=========================IN HOME PAGE==============================\r\n  //===================================================================\r\n\r\n  async getBnbmStat(): Promise<TokenStat> {\r\n    const {BnbmRewardPool, BnbmGenesisRewardPool} = this.contracts;\r\n    const supply = await this.BNBM.totalSupply();\r\n    const bnbmRewardPoolSupply = await this.BNBM.balanceOf(BnbmGenesisRewardPool.address);\r\n    const bnbmRewardPoolSupply2 = await this.BNBM.balanceOf(BnbmRewardPool.address);\r\n    const bnbmCirculatingSupply = supply.sub(bnbmRewardPoolSupply).sub(bnbmRewardPoolSupply2);\r\n    //  const priceInBNB = await this.getTokenPriceFromPancakeswap(this.BNBM);\r\n     //const priceInBNBstring = priceInBNB.toString();\r\n     const priceInBTC = await this.getTokenPriceFromPancakeswapBTC(this.BNBM);\r\n     const priceOfOneBNB = await this.getWBNBPriceFromPancakeswap();\r\n     // const priceOfOneBTC = await this.getBTCBPriceFromPancakeswap();\r\n    //  const priceInDollars = await this.getTokenPriceFromPancakeswapBNBMUSD();\r\n    //  console.log('priceOfBnbmInDollars BNBM', priceInDollars);\r\n    const priceOfBnbmInDollars = ((Number(priceInBTC) * Number(priceOfOneBNB)) / 100).toFixed(4);\r\n    return {\r\n      //  tokenInFtm: (Number(priceInBTC) * 100).toString(),\r\n      tokenInFtm: priceInBTC?.toString(),\r\n      priceInDollars: priceOfBnbmInDollars,\r\n      totalSupply: getDisplayBalance(supply, this.BNBM.decimal, 0),\r\n      circulatingSupply: getDisplayBalance(bnbmCirculatingSupply, this.BNBM.decimal, 0),\r\n    };\r\n  }\r\n\r\n  async getBTCPriceUSD(): Promise<Number> {\r\n    const priceOfOneBNB = await this.getBTCBPriceFromPancakeswap();\r\n    return Number(priceOfOneBNB);\r\n  }\r\n\r\n  async getBNBPriceUSD(): Promise<Number> {\r\n    const priceOfOneBNB = await this.getWBNBPriceFromPancakeswap();\r\n    return Number(priceOfOneBNB);\r\n  }\r\n\r\n  /**\r\n   * Calculates various stats for the requested LP\r\n   * @param name of the LP token to load stats for\r\n   * @returns\r\n   */\r\n  async getLPStat(name: string): Promise<LPStat> {\r\n    const lpToken = this.externalTokens[name];\r\n    const lpTokenSupplyBN = await lpToken.totalSupply();\r\n    const lpTokenSupply = getDisplayBalance(lpTokenSupplyBN, 18);\r\n    const token0 = name.startsWith('BNBM') ? this.BNBM : this.SBNB;\r\n    const isBnbm = name.startsWith('BNBM');\r\n    const tokenAmountBN = await token0.balanceOf(lpToken.address);\r\n    const tokenAmount = getDisplayBalance(tokenAmountBN, 18);\r\n\r\n    const ftmAmountBN = await this.BNB.balanceOf(lpToken.address);\r\n    const ftmAmount = getDisplayBalance(ftmAmountBN, 18);\r\n    const tokenAmountInOneLP = Number(tokenAmount) / Number(lpTokenSupply);\r\n    const ftmAmountInOneLP = Number(ftmAmount) / Number(lpTokenSupply);\r\n    const lpTokenPrice = await this.getLPTokenPrice(lpToken, token0, isBnbm);\r\n    const lpTokenPriceFixed = Number(lpTokenPrice).toFixed(2).toString();\r\n    const liquidity = (Number(lpTokenSupply) * Number(lpTokenPrice)).toFixed(2).toString();\r\n    return {\r\n      tokenAmount: tokenAmountInOneLP.toFixed(2).toString(),\r\n      ftmAmount: ftmAmountInOneLP.toFixed(2).toString(),\r\n      priceOfOne: lpTokenPriceFixed,\r\n      totalLiquidity: liquidity,\r\n      totalSupply: Number(lpTokenSupply).toFixed(2).toString(),\r\n    };\r\n  }\r\n\r\n  async getLPStatBTC(name: string): Promise<LPStat> {\r\n    const lpToken = this.externalTokens[name];\r\n    const lpTokenSupplyBN = await lpToken.totalSupply();\r\n    const lpTokenSupply = getDisplayBalance(lpTokenSupplyBN, 18);\r\n    const token0 = name.startsWith('BNBM') ? this.BNBM : this.SBNB;\r\n    const isBnbm = name.startsWith('BNBM');\r\n    const tokenAmountBN = await token0.balanceOf(lpToken.address);\r\n    const tokenAmount = getDisplayBalance(tokenAmountBN, 18);\r\n\r\n    const btcAmountBN = await this.BTC.balanceOf(lpToken.address);\r\n    const btcAmount = getDisplayBalance(btcAmountBN, 18);\r\n    const tokenAmountInOneLP = Number(tokenAmount) / Number(lpTokenSupply);\r\n    const ftmAmountInOneLP = Number(btcAmount) / Number(lpTokenSupply);\r\n    const lpTokenPrice = await this.getLPTokenPrice(lpToken, token0, isBnbm);\r\n\r\n    const lpTokenPriceFixed = Number(lpTokenPrice).toFixed(2).toString();\r\n\r\n    const liquidity = (Number(lpTokenSupply) * Number(lpTokenPrice)).toFixed(2).toString();\r\n\r\n    return {\r\n      tokenAmount: tokenAmountInOneLP.toFixed(2).toString(),\r\n      ftmAmount: ftmAmountInOneLP.toFixed(5).toString(),\r\n      priceOfOne: lpTokenPriceFixed,\r\n      totalLiquidity: liquidity,\r\n      totalSupply: Number(lpTokenSupply).toFixed(2).toString(),\r\n    };\r\n  }\r\n  /**\r\n   * Use this method to get price for Bnbm\r\n   * @returns TokenStat for BBNB\r\n   * priceInBNB\r\n   * priceInDollars\r\n   * TotalSupply\r\n   * CirculatingSupply (always equal to total supply for bonds)\r\n   */\r\n  async getBondStat(): Promise<TokenStat> {\r\n    const {Treasury} = this.contracts;\r\n    const bnbmStat = await this.getBnbmStat();\r\n\r\n    //console.log('========= getbondstat', bnbmStat)\r\n    const bondBnbmRatioBN = await Treasury.getBondPremiumRate();\r\n    const modifier = bondBnbmRatioBN / 1e16 > 1 ? bondBnbmRatioBN / 1e16 : 1;\r\n    // const modifier = 1;\r\n    const bondPriceInBNB = (Number(bnbmStat.tokenInFtm) * modifier).toFixed(4);\r\n    const priceOfBBnbInDollars = (Number(bnbmStat.priceInDollars) * modifier).toFixed(4);\r\n    const supply = await this.BBNB.displayedTotalSupply();\r\n    return {\r\n      tokenInFtm: bondPriceInBNB,\r\n      priceInDollars: priceOfBBnbInDollars,\r\n      totalSupply: supply,\r\n      circulatingSupply: supply,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @returns TokenStat for SBNB\r\n   * priceInBNB\r\n   * priceInDollars\r\n   * TotalSupply\r\n   * CirculatingSupply (always equal to total supply for bonds)\r\n   */\r\n  async getShareStat(): Promise<TokenStat> {\r\n    const {CarRewardPool} = this.contracts;\r\n\r\n    const supply = await this.SBNB.totalSupply();\r\n\r\n    const priceInBNB = await this.getTokenPriceFromPancakeswap(this.SBNB);\r\n    const bnbmRewardPoolSupply = await this.SBNB.balanceOf(CarRewardPool.address);\r\n    const cabCirculatingSupply = supply.sub(bnbmRewardPoolSupply);\r\n    const priceOfOneBNB = await this.getWBNBPriceFromPancakeswap();\r\n    const priceOfSharesInDollars = (Number(priceInBNB) * Number(priceOfOneBNB)).toFixed(2);\r\n    return {\r\n      tokenInFtm: priceInBNB,\r\n      priceInDollars: priceOfSharesInDollars,\r\n      totalSupply: getDisplayBalance(supply, this.SBNB.decimal, 0),\r\n      circulatingSupply: getDisplayBalance(cabCirculatingSupply, this.SBNB.decimal, 0),\r\n    };\r\n  }\r\n\r\n  async getBnbmStatInEstimatedTWAP(): Promise<TokenStat> {\r\n    const {Oracle, BnbmRewardPool} = this.contracts;\r\n    const expectedPrice = await Oracle.twap(this.BNBM.address, ethers.utils.parseEther('100'));\r\n\r\n    const supply = await this.BNBM.totalSupply();\r\n    const bnbmRewardPoolSupply = await this.BNBM.balanceOf(BnbmRewardPool.address);\r\n    const bnbmCirculatingSupply = supply.sub(bnbmRewardPoolSupply);\r\n    return {\r\n      tokenInFtm: getDisplayBalance(expectedPrice),\r\n      priceInDollars: getDisplayBalance(expectedPrice),\r\n      totalSupply: getDisplayBalance(supply, this.BNBM.decimal, 0),\r\n      circulatingSupply: getDisplayBalance(bnbmCirculatingSupply, this.BNBM.decimal, 0),\r\n    };\r\n  }\r\n\r\n  async getBnbmPriceInLastTWAP(): Promise<BigNumber> {\r\n    const {Treasury} = this.contracts;\r\n    return Treasury.getBnbmUpdatedPrice();\r\n  }\r\n\r\n  // async getBnbmPegTWAP(): Promise<any> {\r\n  //   const { Treasury } = this.contracts;\r\n  //   const updatedPrice = Treasury.getBnbmUpdatedPrice();\r\n  //   const updatedPrice2 = updatedPrice * 10000;\r\n  //   return updatedPrice2;\r\n  // }\r\n\r\n  \r\n\r\n  async getBondsPurchasable(): Promise<BigNumber> {\r\n    const {Treasury} = this.contracts;\r\n    // const burnableBnbm = (Number(Treasury.getBurnableBnbmLeft()) * 1000).toFixed(2).toString();\r\n    return Treasury.getBurnableBnbmLeft();\r\n  }\r\n\r\n  /**\r\n   * Calculates the TVL, APR and daily APR of a provided pool/bank\r\n   * @param bank\r\n   * @returns\r\n   */\r\n  async getPoolAPRs(bank: Bank): Promise<PoolStats> {\r\n    if (this.myAccount === undefined) return;\r\n    const depositToken = bank.depositToken;\r\n    const poolContract = this.contracts[bank.contract];\r\n    const depositTokenPrice = await this.getDepositTokenPriceInDollars(bank.depositTokenName, depositToken);\r\n    \r\n    const stakeInPool = await depositToken.balanceOf(bank.address);\r\n    const TVL = Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\r\n    \r\n    const stat = bank.earnTokenName === 'BNBM' ? await this.getBnbmStat() : await this.getShareStat();\r\n    const tokenPerSecond = await this.getTokenPerSecond(\r\n      bank.earnTokenName,\r\n      bank.contract,\r\n      poolContract,\r\n      bank.depositTokenName,\r\n    );\r\n      \r\n    const tokenPerHour = tokenPerSecond.mul(60).mul(60);\r\n    const totalRewardPricePerYear =\r\n      Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24).mul(365)));\r\n\r\n    const totalRewardPricePerDay = Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24)));\r\n    const totalStakingTokenInPool =\r\n      Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\r\n    const dailyAPR = (totalRewardPricePerDay / totalStakingTokenInPool) * 100;\r\n    const yearlyAPR = (totalRewardPricePerYear / totalStakingTokenInPool) * 100;\r\n    return {\r\n      dailyAPR: dailyAPR.toFixed(2).toString(),\r\n      yearlyAPR: yearlyAPR.toFixed(2).toString(),\r\n      TVL: TVL.toFixed(2).toString(),\r\n    };\r\n  }\r\n\r\n  async getXbnbmAPR(): Promise<PoolStats> {\r\n    if (this.myAccount === undefined) return;\r\n    const bnbmToken = this.BNBM;\r\n    const xbnbmToken = this.XBNBM;\r\n\r\n    const xbnbmExchange = await this.getXbnbmExchange();\r\n    const xbnbmPercent = await xbnbmExchange;\r\n    const xbnbmPercentTotal = (Number(xbnbmPercent) / 1000000000000000000) * 100 - 100;\r\n\r\n    const depositTokenPrice = await this.getDepositTokenPriceInDollars(bnbmToken.symbol, bnbmToken);\r\n\r\n    const stakeInPool = await bnbmToken.balanceOf(xbnbmToken.address);\r\n\r\n    const TVL = Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, bnbmToken.decimal));\r\n\r\n    const startDate = new Date('Febrary 14, 2022');\r\n    const nowDate = new Date(Date.now());\r\n    const difference = nowDate.getTime() - startDate.getTime();\r\n    const days = difference / 60 / 60 / 24 / 1000;\r\n    const aprPerDay = xbnbmPercentTotal / days;\r\n\r\n    // Determine days between now and a date\r\n\r\n    // const tokenPerHour = tokenPerSecond.mul(60).mul(60);\r\n    // const totalRewardPricePerYear =\r\n    //   Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24).mul(365)));\r\n    // const totalRewardPricePerDay = Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24)));\r\n    // const totalStakingTokenInPool =\r\n    //   Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\r\n    // const dailyAPR = (totalRewardPricePerDay / totalStakingTokenInPool) * 100;\r\n    // const yearlyAPR = (totalRewardPricePerYear / totalStakingTokenInPool) * 100;\r\n\r\n    const dailyAPR = aprPerDay;\r\n    const yearlyAPR = aprPerDay * 365;\r\n    return {\r\n      dailyAPR: dailyAPR.toFixed(2).toString(),\r\n      yearlyAPR: yearlyAPR.toFixed(2).toString(),\r\n      TVL: TVL.toFixed(2).toString(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Method to return the amount of tokens the pool yields per second\r\n   * @param earnTokenName the name of the token that the pool is earning\r\n   * @param contractName the contract of the pool/bank\r\n   * @param poolContract the actual contract of the pool\r\n   * @returns\r\n   */\r\n  async getTokenPerSecond(\r\n    earnTokenName: string,\r\n    contractName: string,\r\n    poolContract: Contract,\r\n    depositTokenName: string,\r\n  ) {\r\n    //console.log('==========> debug ========>', earnTokenName,contractName, depositTokenName)\r\n    if (earnTokenName === 'BNBM') {\r\n      if (!contractName.endsWith('BnbmRewardPool')) {\r\n        const rewardPerSecond = await poolContract.bnbmPerSecond();\r\n        if (depositTokenName === 'WBNB') {\r\n          return rewardPerSecond.mul(3000).div(9000);\r\n        } else if (depositTokenName === 'BUSD') {\r\n          return rewardPerSecond.mul(3000).div(9000);\r\n        }else if (depositTokenName === 'USDC') {\r\n          return rewardPerSecond.mul(3000).div(9000);\r\n        }\r\n        return rewardPerSecond;\r\n      }\r\n      const poolStartTime = await poolContract.poolStartTime();\r\n      const startDateTime = new Date(poolStartTime.toNumber() * 1000);\r\n      const FOUR_DAYS = 4 * 24 * 60 * 60 * 1000;\r\n      //console.log('==========> debug1 ========>', earnTokenName,contractName, depositTokenName)\r\n      if (Date.now() - startDateTime.getTime() > FOUR_DAYS) {\r\n        return await poolContract.epochBnbmPerSecond(1);\r\n      }\r\n      return await poolContract.epochBnbmPerSecond(0);\r\n    }\r\n    const rewardPerSecond = await poolContract.cabPerSecond();\r\n    //console.log('==========> debug2 ========>', earnTokenName,contractName, depositTokenName)\r\n    if (!depositTokenName.startsWith('SBNB')) {\r\n      return rewardPerSecond.mul(35500).div(59500);\r\n    } else {\r\n      return rewardPerSecond.mul(24000).div(59500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Method to calculate the tokenPrice of the deposited asset in a pool/bank\r\n   * If the deposited token is an LP it will find the price of its pieces\r\n   * @param tokenName\r\n   * @param pool\r\n   * @param token\r\n   * @returns\r\n   */\r\n  async getDepositTokenPriceInDollars(tokenName: string, token: ERC20) {\r\n    let tokenPrice;\r\n    const priceOfOneFtmInDollars = await this.getWBNBPriceFromPancakeswap();\r\n    if (tokenName === 'WBNB') {\r\n      tokenPrice = priceOfOneFtmInDollars;\r\n    } else {\r\n      if (tokenName === 'BNBM-BNB-LP') {\r\n        tokenPrice = await this.getLPTokenPrice(token, this.BNBM, true);\r\n      } else if (tokenName === 'BNBS-BNB-LP') {\r\n        \r\n        tokenPrice = await this.getLPTokenPrice(token, this.SBNB, false);\r\n      } else if (tokenName === 'SBNB-BNB-APELP') {\r\n        tokenPrice = await this.getApeLPTokenPrice(token, this.SBNB, false);\r\n      } else if (tokenName === 'BNBM-BTCB-APELP') {\r\n        tokenPrice = await this.getApeLPTokenPrice(token, this.BNBM, true);\r\n      } else {\r\n        tokenPrice = await this.getTokenPriceFromPancakeswap(token);\r\n        tokenPrice = (Number(tokenPrice) * Number(priceOfOneFtmInDollars)).toString();\r\n        \r\n      }\r\n    }\r\n    return tokenPrice;\r\n  }\r\n\r\n  //===================================================================\r\n  //===================== GET ASSET STATS =============================\r\n  //=========================== END ===================================\r\n  //===================================================================\r\n\r\n  async getCurrentEpoch(): Promise<BigNumber> {\r\n    const {Treasury} = this.contracts;\r\n    return Treasury.epoch();\r\n  }\r\n\r\n  async getBondOraclePriceInLastTWAP(): Promise<BigNumber> {\r\n    const {Treasury} = this.contracts;\r\n    return Treasury.getBondPremiumRate();\r\n  }\r\n\r\n  /**\r\n   * Buy bonds with cash.\r\n   * @param amount amount of cash to purchase bonds with.\r\n   */\r\n  async buyBonds(amount: string | number): Promise<TransactionResponse> {\r\n    const {Treasury} = this.contracts;\r\n    const treasuryBnbmPrice = await Treasury.getBnbmPrice();\r\n    return await Treasury.buyBonds(decimalToBalance(amount), treasuryBnbmPrice);\r\n  }\r\n\r\n  /**\r\n   * Redeem bonds for cash.\r\n   * @param amount amount of bonds to redeem.\r\n   */\r\n  async redeemBonds(amount: string | number): Promise<TransactionResponse> {\r\n    const {Treasury} = this.contracts;\r\n    const priceForBnbm = await Treasury.getBnbmPrice();\r\n\r\n    return await Treasury.redeemBonds(decimalToBalance(amount), priceForBnbm);\r\n  }\r\n\r\n  async getTotalValueLocked(): Promise<Number> {\r\n    let totalValue = 0;\r\n    for (const bankInfo of Object.values(bankDefinitions)) {\r\n      const pool = this.contracts[bankInfo.contract];\r\n      const token = this.externalTokens[bankInfo.depositTokenName];\r\n\r\n      const tokenPrice = await this.getDepositTokenPriceInDollars(bankInfo.depositTokenName, token);\r\n      const tokenAmountInPool = await token.balanceOf(pool.address);\r\n      const value = Number(getDisplayBalance(tokenAmountInPool, token.decimal)) * Number(tokenPrice);\r\n      const poolValue = Number.isNaN(value) ? 0 : value;\r\n\r\n      totalValue += poolValue;\r\n    }\r\n    \r\n    const SBNBPrice = (await this.getShareStat()).priceInDollars;\r\n    const BNBMPrice = (await this.getBnbmStat()).priceInDollars;\r\n    const heavencabBalanceOf = await this.SBNB.balanceOf(this.currentHeaven().address);\r\n    const bnbmStakeBalanceOf = await this.BNBM.balanceOf(this.XBNBM.address);\r\n    const heavenTVL = Number(getDisplayBalance(heavencabBalanceOf, this.SBNB.decimal)) * Number(SBNBPrice);\r\n    \r\n    const bnbmTVL = Number(getDisplayBalance(bnbmStakeBalanceOf, this.BNBM.decimal)) * Number(BNBMPrice);\r\n    return totalValue + heavenTVL + bnbmTVL;\r\n  }\r\n\r\n  /**\r\n   * Calculates the price of an LP token\r\n   * Reference https://github.com/DefiDebauchery/discordpricebot/blob/4da3cdb57016df108ad2d0bb0c91cd8dd5f9d834/pricebot/pricebot.py#L150\r\n   * @param lpToken the token under calculation\r\n   * @param token the token pair used as reference (the other one would be BNB in most cases)\r\n   * @param isBnbm sanity check for usage of bnbm token or cab\r\n   * @returns price of the LP token\r\n   */\r\n  async getLPTokenPrice(lpToken: ERC20, token: ERC20, isBnbm: boolean): Promise<string> {\r\n    const totalSupply = getFullDisplayBalance(await lpToken.totalSupply(), lpToken.decimal);\r\n    //Get amount of tokenA\r\n    const tokenSupply = getFullDisplayBalance(await token.balanceOf(lpToken.address), token.decimal);\r\n    const stat = isBnbm === true ? await this.getBnbmStat() : await this.getShareStat();\r\n    \r\n    const priceOfToken = stat.priceInDollars;\r\n    const tokenInLP = Number(tokenSupply) / Number(totalSupply);\r\n    const tokenPrice = (Number(priceOfToken) * tokenInLP * 2) //We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\r\n    .toString();\r\n    //console.log('====================>totalStakingTokenInPool',tokenSupply,totalSupply, tokenInLP,tokenPrice )\r\n    return tokenPrice;\r\n  }\r\n\r\n  /**\r\n   * Calculates the price of an LP token\r\n   * Reference https://github.com/DefiDebauchery/discordpricebot/blob/4da3cdb57016df108ad2d0bb0c91cd8dd5f9d834/pricebot/pricebot.py#L150\r\n   * @param lpToken the token under calculation\r\n   * @param token the token pair used as reference (the other one would be BNB in most cases)\r\n   * @param isBnbm sanity check for usage of bnbm token or cab\r\n   * @returns price of the LP token\r\n   */\r\n  async getApeLPTokenPrice(lpToken: ERC20, token: ERC20, isBnbm: boolean): Promise<string> {\r\n    const totalSupply = getFullDisplayBalance(await lpToken.totalSupply(), lpToken.decimal);\r\n    //Get amount of tokenA\r\n    const tokenSupply = getFullDisplayBalance(await token.balanceOf(lpToken.address), token.decimal);\r\n    const stat = isBnbm === true ? await this.getBnbmStat() : await this.getShareStat();\r\n    const priceOfToken = stat.priceInDollars;\r\n    const tokenInLP = Number(tokenSupply) / Number(totalSupply);\r\n    const tokenPrice = (Number(priceOfToken) * tokenInLP * 2) //We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\r\n      .toString();\r\n    return tokenPrice;\r\n  }\r\n\r\n  async earnedFromBank(\r\n    poolName: ContractName,\r\n    earnTokenName: String,\r\n    poolId: Number,\r\n    account = this.myAccount,\r\n  ): Promise<BigNumber> {\r\n    const pool = this.contracts[poolName];\r\n    try {\r\n      if (earnTokenName === 'BNBM') {\r\n        return await pool.pendingBNBM(poolId, account);\r\n      } else {\r\n        return await pool.pendingShare(poolId, account);\r\n      }\r\n    } catch (err) {\r\n      console.error(`Failed to call pendingShare() on pool ${pool.address}: ${err.stack}`);\r\n      return BigNumber.from(0);\r\n    }\r\n  }\r\n\r\n  async stakedBalanceOnBank(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<BigNumber> {\r\n    const pool = this.contracts[poolName];\r\n    try {\r\n      let userInfo = await pool.userInfo(poolId, account);\r\n      return await userInfo.amount;\r\n    } catch (err) {\r\n      console.error(`Failed to call userInfo() on pool ${pool.address}: ${err.stack}`);\r\n      return BigNumber.from(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deposits token to given pool.\r\n   * @param poolName A name of pool contract.\r\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\r\n   * @returns {string} Transaction hash\r\n   */\r\n  async stake(poolName: ContractName, poolId: Number, amount: BigNumber): Promise<TransactionResponse> {\r\n    const pool = this.contracts[poolName];\r\n    return await pool.deposit(poolId, amount);\r\n  }\r\n\r\n  /**\r\n   * Withdraws token from given pool.\r\n   * @param poolName A name of pool contract.\r\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\r\n   * @returns {string} Transaction hash\r\n   */\r\n  async unstake(poolName: ContractName, poolId: Number, amount: BigNumber): Promise<TransactionResponse> {\r\n    const pool = this.contracts[poolName];\r\n    return await pool.withdraw(poolId, amount);\r\n  }\r\n\r\n  /**\r\n   * Transfers earned token reward from given pool to my account.\r\n   */\r\n  async harvest(poolName: ContractName, poolId: Number): Promise<TransactionResponse> {\r\n    const pool = this.contracts[poolName];\r\n    //By passing 0 as the amount, we are asking the contract to only redeem the reward and not the currently staked token\r\n    return await pool.withdraw(poolId, 0);\r\n  }\r\n\r\n  /**\r\n   * Harvests and withdraws deposited tokens from the pool.\r\n   */\r\n  async exit(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<TransactionResponse> {\r\n    const pool = this.contracts[poolName];\r\n    let userInfo = await pool.userInfo(poolId, account);\r\n    return await pool.withdraw(poolId, userInfo.amount);\r\n  }\r\n\r\n  async fetchHeavenVersionOfUser(): Promise<string> {\r\n    return 'latest';\r\n  }\r\n\r\n  currentHeaven(): Contract {\r\n    if (!this.heavenVersionOfUser) {\r\n      //throw new Error('you must unlock the wallet to continue.');\r\n    }\r\n    return this.contracts.Heaven;\r\n  }\r\n\r\n  isOldHeavenMember(): boolean {\r\n    return this.heavenVersionOfUser !== 'latest';\r\n  }\r\n\r\n  async getTokenPriceFromPancakeswap(tokenContract: ERC20): Promise<string> {\r\n    const ready = await this.provider.ready;\r\n    if (!ready) return;\r\n    //const { chainId } = this.config;\r\n    const {WBNB} = this.config.externalTokens;\r\n\r\n    const wftm = new Token(56, WBNB[0], WBNB[1], 'WBNB');\r\n    const token = new Token(56, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\r\n    try {\r\n      const wftmToToken = await Fetcher.fetchPairData(wftm, token, this.provider);\r\n      const priceInBUSD = new Route([wftmToToken], token);\r\n      //console.log('debug priceInBUSD',tokenContract, priceInBUSD.midPrice.toFixed(8))\r\n      return priceInBUSD.midPrice.toFixed(8);\r\n    } catch (err) {\r\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\r\n    }\r\n  }\r\n\r\n  async getTokenPriceFromPancakeswapBTC(tokenContract: ERC20): Promise<string> {\r\n    //console.log('priceInBUSDBTC');\r\n    const ready = await this.provider.ready;\r\n    if (!ready) return;\r\n    //const { chainId } = this.config;\r\n    const {WBNB} = this.config.externalTokens;\r\n\r\n    const wbnb = new Token(56, WBNB[0], WBNB[1]);\r\n    // const btcb = new Token(56, this.BTC.address, this.BTC.decimal, 'BTCB', 'BTCB');\r\n    const token = new Token(56, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\r\n    try {\r\n      const wBNBToToken = await Fetcher.fetchPairData(wbnb, token, this.provider);\r\n      const priceInBUSD = new Route([wBNBToToken], token);\r\n      const priceForPeg = Number(priceInBUSD.midPrice.toFixed(12)) * 100;\r\n      return priceForPeg.toFixed(4);\r\n    } catch (err) {\r\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\r\n    }\r\n  }\r\n\r\n  async getTokenPriceFromPancakeswapBNBMUSD(): Promise<string> {\r\n    const ready = await this.provider.ready;\r\n    if (!ready) return;\r\n    //const { chainId } = this.config;\r\n    const {WBNB} = this.config.externalTokens;\r\n\r\n     const wbnb = new Token(56, WBNB[0], WBNB[1]);\r\n    const btcb = new Token(56, this.BTC.address, this.BTC.decimal, 'BTCB', 'BTCB');\r\n    const token = new Token(56, this.BNBM.address, this.BNBM.decimal, this.BNBM.symbol);\r\n    try {\r\n      const wftmToToken = await Fetcher.fetchPairData(token, wbnb, this.provider);\r\n      const priceInBUSD = new Route([wftmToToken], token);\r\n      //console.log('test', priceInBUSD.midPrice.toFixed(12));\r\n\r\n      const priceForPeg = Number(priceInBUSD.midPrice.toFixed(12)) * 10000;\r\n      return priceForPeg.toFixed(4);\r\n    } catch (err) {\r\n      console.error(`Failed to fetch token price of ${this.BNBM.symbol}: ${err}`);\r\n    }\r\n  }\r\n\r\n  // async getTokenPriceFromSpiritswap(tokenContract: ERC20): Promise<string> {\r\n  //   const ready = await this.provider.ready;\r\n  //   if (!ready) return;\r\n  //   const { chainId } = this.config;\r\n\r\n  //   const { WBNB } = this.externalTokens;\r\n\r\n  //   const wftm = new TokenSpirit(chainId, WBNB.address, WBNB.decimal);\r\n  //   const token = new TokenSpirit(chainId, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\r\n  //   try {\r\n  //     const wftmToToken = await FetcherSpirit.fetchPairData(wftm, token, this.provider);\r\n  //     const liquidityToken = wftmToToken.liquidityToken;\r\n  //     let ftmBalanceInLP = await WBNB.balanceOf(liquidityToken.address);\r\n  //     let ftmAmount = Number(getFullDisplayBalance(ftmBalanceInLP, WBNB.decimal));\r\n  //     let shibaBalanceInLP = await tokenContract.balanceOf(liquidityToken.address);\r\n  //     let shibaAmount = Number(getFullDisplayBalance(shibaBalanceInLP, tokenContract.decimal));\r\n  //     const priceOfOneFtmInDollars = await this.getWBNBPriceFromPancakeswap();\r\n  //     let priceOfShiba = (ftmAmount / shibaAmount) * Number(priceOfOneFtmInDollars);\r\n  //     return priceOfShiba.toString();\r\n  //   } catch (err) {\r\n  //     console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\r\n  //   }\r\n  // }\r\n\r\n  async getWBNBPriceFromPancakeswap(): Promise<string> {\r\n    const ready = await this.provider.ready;\r\n    if (!ready) return;\r\n    const {WBNB, FUSDT} = this.externalTokens;\r\n    try {\r\n      const fusdt_wftm_lp_pair = this.externalTokens['USDT-BNB-LP'];\r\n      let ftm_amount_BN = await WBNB.balanceOf(fusdt_wftm_lp_pair.address);\r\n      let ftm_amount = Number(getFullDisplayBalance(ftm_amount_BN, WBNB.decimal));\r\n      let fusdt_amount_BN = await FUSDT.balanceOf(fusdt_wftm_lp_pair.address);\r\n      let fusdt_amount = Number(getFullDisplayBalance(fusdt_amount_BN, FUSDT.decimal));\r\n      return (fusdt_amount / ftm_amount).toString();\r\n    } catch (err) {\r\n      console.error(`Failed to fetch token price of WBNB: ${err}`);\r\n    }\r\n  }\r\n\r\n  async getBTCBPriceFromPancakeswap(): Promise<string> {\r\n    const ready = await this.provider.ready;\r\n    if (!ready) return;\r\n    const {BTCB} = this.externalTokens;\r\n    try {\r\n      const btcPriceInBNB = await this.getTokenPriceFromPancakeswap(BTCB);\r\n\r\n      const wbnbPrice = await this.getWBNBPriceFromPancakeswap();\r\n\r\n      const btcprice = (Number(btcPriceInBNB) * Number(wbnbPrice)).toFixed(2).toString();\r\n      //console.log('btcprice', btcprice);\r\n      return btcprice;\r\n    } catch (err) {\r\n      console.error(`Failed to fetch token price of BTCB: ${err}`);\r\n    }\r\n  }\r\n\r\n  // async getBTCBPriceFromPancakeswap(): Promise<string> {\r\n  //   const ready = await this.provider.ready;\r\n  //   if (!ready) return;\r\n  //   const { BTCB, FUSDT } = this.externalTokens;\r\n  //   try {\r\n  //     const fusdt_btcb_lp_pair = this.externalTokens['USDT-BTCB-LP'];\r\n  //     let ftm_amount_BN = await BTCB.balanceOf(fusdt_btcb_lp_pair.address);\r\n  //     let ftm_amount = Number(getFullDisplayBalance(ftm_amount_BN, BTCB.decimal));\r\n  //     let fusdt_amount_BN = await FUSDT.balanceOf(fusdt_btcb_lp_pair.address);\r\n  //     let fusdt_amount = Number(getFullDisplayBalance(fusdt_amount_BN, FUSDT.decimal));\r\n  //     console.log('BTCB price', (fusdt_amount / ftm_amount).toString());\r\n  //     return (fusdt_amount / ftm_amount).toString();\r\n  //     console.log('BTCB price');\r\n  //   } catch (err) {\r\n  //     console.error(`Failed to fetch token price of BTCB: ${err}`);\r\n  //   }\r\n  // }\r\n\r\n  //===================================================================\r\n  //===================================================================\r\n  //===================== MASONRY METHODS =============================\r\n  //===================================================================\r\n  //===================================================================\r\n\r\n  async getHeavenAPR() {\r\n    const Heaven = this.currentHeaven();\r\n    const latestSnapshotIndex = await Heaven.latestSnapshotIndex();\r\n    const lastHistory = await Heaven.heavenHistory(latestSnapshotIndex);\r\n\r\n    const lastRewardsReceived = lastHistory[1];\r\n\r\n    const SBNBPrice = (await this.getShareStat()).priceInDollars;\r\n    const BNBMPrice = (await this.getBnbmStat()).priceInDollars;\r\n    const epochRewardsPerShare = lastRewardsReceived / 1e18;\r\n\r\n    //Mgod formula\r\n    const amountOfRewardsPerDay = epochRewardsPerShare * Number(BNBMPrice) * 4;\r\n    const heavencabBalanceOf = await this.SBNB.balanceOf(Heaven.address);\r\n    const heavenTVL = Number(getDisplayBalance(heavencabBalanceOf, this.SBNB.decimal)) * Number(SBNBPrice);\r\n    //console.log('==========>', epochRewardsPerShare, heavenTVL)\r\n    const realAPR = ((amountOfRewardsPerDay * 100) / heavenTVL) * 365;\r\n    return realAPR;\r\n  }\r\n\r\n  async getBnbmStakeAPR() {\r\n    const Heaven = this.currentHeaven();\r\n    const latestSnapshotIndex = await Heaven.latestSnapshotIndex();\r\n    const lastHistory = await Heaven.heavenHistory(latestSnapshotIndex);\r\n\r\n    const lastRewardsReceived = lastHistory[1];\r\n\r\n    const BNBMPrice = (await this.getBnbmStat()).priceInDollars;\r\n    const epochRewardsPerShare = lastRewardsReceived / 1e18;\r\n\r\n    //Mgod formula\r\n    const amountOfRewardsPerDay = epochRewardsPerShare * Number(BNBMPrice) * 4;\r\n    const xBnbmBnbmBalanceOf = await this.BNBM.balanceOf(this.XBNBM.address);\r\n    const bnbmTVL = Number(getDisplayBalance(xBnbmBnbmBalanceOf, this.XBNBM.decimal)) * Number(BNBMPrice);\r\n    const realAPR = ((amountOfRewardsPerDay * 20) / bnbmTVL) * 365;\r\n    return realAPR;\r\n  }\r\n\r\n  /**\r\n   * Checks if the user is allowed to retrieve their reward from the Heaven\r\n   * @returns true if user can withdraw reward, false if they can't\r\n   */\r\n  async canUserClaimRewardFromHeaven(): Promise<boolean> {\r\n    const Heaven = this.currentHeaven();\r\n    return await Heaven.canClaimReward(this.myAccount);\r\n  }\r\n\r\n  /**\r\n   * Checks if the user is allowed to retrieve their reward from the Heaven\r\n   * @returns true if user can withdraw reward, false if they can't\r\n   */\r\n  async canUserUnstakeFromHeaven(): Promise<boolean> {\r\n    const Heaven = this.currentHeaven();\r\n    const canWithdraw = await Heaven.canWithdraw(this.myAccount);\r\n    const stakedAmount = await this.getStakedSharesOnHeaven();\r\n    const notStaked = Number(getDisplayBalance(stakedAmount, this.SBNB.decimal)) === 0;\r\n    const result = notStaked ? true : canWithdraw;\r\n    return result;\r\n  }\r\n\r\n  async timeUntilClaimRewardFromHeaven(): Promise<BigNumber> {\r\n    // const Heaven = this.currentHeaven();\r\n    // const mason = await Heaven.masons(this.myAccount);\r\n    return BigNumber.from(0);\r\n  }\r\n\r\n  async getTotalStakedInHeaven(): Promise<BigNumber> {\r\n    const Heaven = this.currentHeaven();\r\n    return await Heaven.totalSupply();\r\n  }\r\n\r\n  async stakeShareToHeaven(amount: string): Promise<TransactionResponse> {\r\n    if (this.isOldHeavenMember()) {\r\n      throw new Error(\"you're using old heaven. please withdraw and deposit the SBNB again.\");\r\n    }\r\n    const Heaven = this.currentHeaven();\r\n    return await Heaven.stake(decimalToBalance(amount));\r\n  }\r\n\r\n  async stakeToBnbm(amount: string): Promise<TransactionResponse> {\r\n    const Xbnbm = this.contracts.xBNBM;\r\n    return await Xbnbm.enter(decimalToBalance(amount));\r\n  }\r\n\r\n  async getStakedSharesOnHeaven(): Promise<BigNumber> {\r\n    const Heaven = this.currentHeaven();\r\n    if (this.heavenVersionOfUser === 'v1') {\r\n      return await Heaven.getShareOf(this.myAccount);\r\n    }\r\n    return await Heaven.balanceOf(this.myAccount);\r\n  }\r\n\r\n  async getStakedBnbm(): Promise<BigNumber> {\r\n    const Xbnbm = this.contracts.xBNBM;\r\n    return await Xbnbm.balanceOf(this.myAccount);\r\n  }\r\n\r\n  async getTotalStakedBnbm(): Promise<BigNumber> {\r\n    const Xbnbm = this.contracts.xBNBM;\r\n    const bnbm = this.BNBM;\r\n    return await bnbm.balanceOf(Xbnbm.address);\r\n  }\r\n\r\n  async getXbnbmExchange(): Promise<BigNumber> {\r\n    const Xbnbm = this.contracts.xBNBM;\r\n    const XbnbmExchange = await Xbnbm.getExchangeRate();\r\n\r\n    const xBnbmPerBnbm = parseFloat(XbnbmExchange) / 1000000000000000000;\r\n    const xBnbmRate = xBnbmPerBnbm.toString();\r\n    return parseUnits(xBnbmRate, 18);\r\n  }\r\n\r\n  async withdrawFromBnbm(amount: string): Promise<TransactionResponse> {\r\n    const Xbnbm = this.contracts.xBNBM;\r\n    return await Xbnbm.leave(decimalToBalance(amount));\r\n  }\r\n\r\n  async getEarningsOnHeaven(): Promise<BigNumber> {\r\n    const Heaven = this.currentHeaven();\r\n    if (this.heavenVersionOfUser === 'v1') {\r\n      return await Heaven.getCashEarningsOf(this.myAccount);\r\n    }\r\n    return await Heaven.earned(this.myAccount);\r\n  }\r\n\r\n  async withdrawShareFromHeaven(amount: string): Promise<TransactionResponse> {\r\n    const Heaven = this.currentHeaven();\r\n    return await Heaven.withdraw(decimalToBalance(amount));\r\n  }\r\n\r\n  async harvestCashFromHeaven(): Promise<TransactionResponse> {\r\n    const Heaven = this.currentHeaven();\r\n    if (this.heavenVersionOfUser === 'v1') {\r\n      return await Heaven.claimDividends();\r\n    }\r\n    return await Heaven.claimReward();\r\n  }\r\n\r\n  async exitFromHeaven(): Promise<TransactionResponse> {\r\n    const Heaven = this.currentHeaven();\r\n    return await Heaven.exit();\r\n  }\r\n\r\n  async getTreasuryNextAllocationTime(): Promise<AllocationTime> {\r\n    const {Treasury} = this.contracts;\r\n    const nextEpochTimestamp: BigNumber = await Treasury.nextEpochPoint();\r\n    const nextAllocation = new Date(nextEpochTimestamp.mul(1000).toNumber());\r\n    const prevAllocation = new Date(Date.now());\r\n\r\n    return {from: prevAllocation, to: nextAllocation};\r\n  }\r\n  /**\r\n   * This method calculates and returns in a from to to format\r\n   * the period the user needs to wait before being allowed to claim\r\n   * their reward from the heaven\r\n   * @returns Promise<AllocationTime>\r\n   */\r\n  async getUserClaimRewardTime(): Promise<AllocationTime> {\r\n    const {Heaven, Treasury} = this.contracts;\r\n    const nextEpochTimestamp = await Heaven.nextEpochPoint(); //in unix timestamp\r\n    const currentEpoch = await Heaven.epoch();\r\n    const mason = await Heaven.members(this.myAccount);\r\n    const startTimeEpoch = mason.epochTimerStart;\r\n    const period = await Treasury.PERIOD();\r\n    const periodInHours = period / 60 / 60; // 6 hours, period is displayed in seconds which is 21600\r\n    const rewardLockupEpochs = await Heaven.rewardLockupEpochs();\r\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(rewardLockupEpochs);\r\n\r\n    const fromDate = new Date(Date.now());\r\n    if (targetEpochForClaimUnlock - currentEpoch <= 0) {\r\n      return {from: fromDate, to: fromDate};\r\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\r\n      const toDate = new Date(nextEpochTimestamp * 1000);\r\n      return {from: fromDate, to: toDate};\r\n    } else {\r\n      const toDate = new Date(nextEpochTimestamp * 1000);\r\n      const delta = targetEpochForClaimUnlock - currentEpoch - 1;\r\n      const endDate = moment(toDate)\r\n        .add(delta * periodInHours, 'hours')\r\n        .toDate();\r\n      return {from: fromDate, to: endDate};\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method calculates and returns in a from to to format\r\n   * the period the user needs to wait before being allowed to unstake\r\n   * from the heaven\r\n   * @returns Promise<AllocationTime>\r\n   */\r\n  async getUserUnstakeTime(): Promise<AllocationTime> {\r\n    const {Heaven, Treasury} = this.contracts;\r\n    const nextEpochTimestamp = await Heaven.nextEpochPoint();\r\n    const currentEpoch = await Heaven.epoch();\r\n    const mason = await Heaven.members(this.myAccount);\r\n    const startTimeEpoch = mason.epochTimerStart;\r\n    const period = await Treasury.PERIOD();\r\n    const PeriodInHours = period / 60 / 60;\r\n    const withdrawLockupEpochs = await Heaven.withdrawLockupEpochs();\r\n    const fromDate = new Date(Date.now());\r\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(withdrawLockupEpochs);\r\n    const stakedAmount = await this.getStakedSharesOnHeaven();\r\n    if (currentEpoch <= targetEpochForClaimUnlock && Number(stakedAmount) === 0) {\r\n      return {from: fromDate, to: fromDate};\r\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\r\n      const toDate = new Date(nextEpochTimestamp * 1000);\r\n      return {from: fromDate, to: toDate};\r\n    } else {\r\n      const toDate = new Date(nextEpochTimestamp * 1000);\r\n      const delta = targetEpochForClaimUnlock - Number(currentEpoch) - 1;\r\n      const endDate = moment(toDate)\r\n        .add(delta * PeriodInHours, 'hours')\r\n        .toDate();\r\n      return {from: fromDate, to: endDate};\r\n    }\r\n  }\r\n\r\n  async watchAssetInMetamask(assetName: string): Promise<boolean> {\r\n    const host = window.location.origin;\r\n    // NOTE (appleseed): 33T token defaults to sGLA logo since we don't have a 33T logo yet\r\n    \r\n    const {ethereum} = window as any;\r\n    if (ethereum && ethereum.networkVersion === config.chainId.toString()) {\r\n      let asset;\r\n      let assetUrl;\r\n      if (assetName === 'BNBM') {\r\n        asset = this.BNBM;\r\n        assetUrl = \"/bnbm.png\";\r\n      } else if (assetName === 'SBNB') {\r\n        asset = this.SBNB;\r\n        assetUrl = \"/sbnb.png\";\r\n      } else if (assetName === 'BBNB') {\r\n        asset = this.BBNB;\r\n        assetUrl = \"/bbnb.png\";\r\n      } else if (assetName === 'XBNBM') {\r\n        asset = this.XBNBM;\r\n        assetUrl = \"/xbnbm.png\";\r\n      }\r\n      const imageURL = `${host}/${assetUrl}`;\r\n      console.log(\"ddd\", imageURL);\r\n      await ethereum.request({\r\n        method: 'wallet_watchAsset',\r\n        params: {\r\n          type: 'ERC20',\r\n          options: {\r\n            address: asset.address,\r\n            symbol: asset.symbol,\r\n            decimals: 18,\r\n            image: imageURL,\r\n          },\r\n        },\r\n      });\r\n    }\r\n    return true;\r\n  }\r\n\r\n  async provideBnbmFtmLP(ftmAmount: string, bnbmAmount: BigNumber): Promise<TransactionResponse> {\r\n    const {TaxOffice} = this.contracts;\r\n    let overrides = {\r\n      value: parseUnits(ftmAmount, 18),\r\n    };\r\n    return await TaxOffice.addLiquidityETHTaxFree(\r\n      bnbmAmount,\r\n      bnbmAmount.mul(992).div(1000),\r\n      parseUnits(ftmAmount, 18).mul(992).div(1000),\r\n      overrides,\r\n    );\r\n  }\r\n\r\n  async quoteFromSpooky(tokenAmount: string, tokenName: string): Promise<string> {\r\n    const {SpookyRouter} = this.contracts;\r\n    const {_reserve0, _reserve1} = await this.BNBMWBNB_LP.getReserves();\r\n    let quote;\r\n    if (tokenName === 'BNBM') {\r\n      quote = await SpookyRouter.quote(parseUnits(tokenAmount), _reserve0, _reserve1);\r\n    } else {\r\n      quote = await SpookyRouter.quote(parseUnits(tokenAmount), _reserve1, _reserve0);\r\n    }\r\n    return (quote / 1e18).toString();\r\n  }\r\n\r\n  /**\r\n   * @returns an array of the regulation events till the most up to date epoch\r\n   */\r\n  async listenForRegulationsEvents(): Promise<any> {\r\n    const {Treasury} = this.contracts;\r\n\r\n    const treasuryDaoFundedFilter = Treasury.filters.DaoFundFunded();\r\n    const treasuryDevFundedFilter = Treasury.filters.DevFundFunded();\r\n    const treasuryHeavenFundedFilter = Treasury.filters.HeavenFunded();\r\n    const boughtBondsFilter = Treasury.filters.BoughtBonds();\r\n    const redeemBondsFilter = Treasury.filters.RedeemedBonds();\r\n\r\n    let epochBlocksRanges: any[] = [];\r\n    let heavenFundEvents = await Treasury.queryFilter(treasuryHeavenFundedFilter);\r\n    var events: any[] = [];\r\n    heavenFundEvents.forEach(function callback(value, index) {\r\n      events.push({epoch: index + 1});\r\n      events[index].heavenFund = getDisplayBalance(value.args[1]);\r\n      if (index === 0) {\r\n        epochBlocksRanges.push({\r\n          index: index,\r\n          startBlock: value.blockNumber,\r\n          boughBonds: 0,\r\n          redeemedBonds: 0,\r\n        });\r\n      }\r\n      if (index > 0) {\r\n        epochBlocksRanges.push({\r\n          index: index,\r\n          startBlock: value.blockNumber,\r\n          boughBonds: 0,\r\n          redeemedBonds: 0,\r\n        });\r\n        epochBlocksRanges[index - 1].endBlock = value.blockNumber;\r\n      }\r\n    });\r\n\r\n    epochBlocksRanges.forEach(async (value, index) => {\r\n      events[index].bondsBought = await this.getBondsWithFilterForPeriod(\r\n        boughtBondsFilter,\r\n        value.startBlock,\r\n        value.endBlock,\r\n      );\r\n      events[index].bondsRedeemed = await this.getBondsWithFilterForPeriod(\r\n        redeemBondsFilter,\r\n        value.startBlock,\r\n        value.endBlock,\r\n      );\r\n    });\r\n    let DEVFundEvents = await Treasury.queryFilter(treasuryDevFundedFilter);\r\n    DEVFundEvents.forEach(function callback(value, index) {\r\n      events[index].devFund = getDisplayBalance(value.args[1]);\r\n    });\r\n    let DAOFundEvents = await Treasury.queryFilter(treasuryDaoFundedFilter);\r\n    DAOFundEvents.forEach(function callback(value, index) {\r\n      events[index].daoFund = getDisplayBalance(value.args[1]);\r\n    });\r\n    return events;\r\n  }\r\n\r\n  /**\r\n   * Helper method\r\n   * @param filter applied on the query to the treasury events\r\n   * @param from block number\r\n   * @param to block number\r\n   * @returns the amount of bonds events emitted based on the filter provided during a specific period\r\n   */\r\n  async getBondsWithFilterForPeriod(filter: EventFilter, from: number, to: number): Promise<number> {\r\n    const {Treasury} = this.contracts;\r\n    const bondsAmount = await Treasury.queryFilter(filter, from, to);\r\n    return bondsAmount.length;\r\n  }\r\n\r\n  async estimateZapIn(tokenName: string, lpName: string, amount: string): Promise<number[]> {\r\n    const {zapper} = this.contracts;\r\n    const lpToken = this.externalTokens[lpName];\r\n    let estimate;\r\n    if (tokenName === BNB_TICKER) {\r\n      estimate = await zapper.estimateZapIn(lpToken.address, SPOOKY_ROUTER_ADDR, parseUnits(amount, 18));\r\n    } else {\r\n      const token = tokenName === BNBM_TICKER ? this.BNBM : this.SBNB;\r\n      estimate = await zapper.estimateZapInToken(\r\n        token.address,\r\n        lpToken.address,\r\n        SPOOKY_ROUTER_ADDR,\r\n        parseUnits(amount, 18),\r\n      );\r\n    }\r\n    return [estimate[0] / 1e18, estimate[1] / 1e18];\r\n  }\r\n  async zapIn(tokenName: string, lpName: string, amount: string): Promise<TransactionResponse> {\r\n    const {zapper} = this.contracts;\r\n    const lpToken = this.externalTokens[lpName];\r\n    if (tokenName === BNB_TICKER) {\r\n      let overrides = {\r\n        value: parseUnits(amount, 18),\r\n      };\r\n      return await zapper.zapIn(lpToken.address, SPOOKY_ROUTER_ADDR, this.myAccount, overrides);\r\n    } else {\r\n      const token = tokenName === BNBM_TICKER ? this.BNBM : this.SBNB;\r\n      return await zapper.zapInToken(\r\n        token.address,\r\n        parseUnits(amount, 18),\r\n        lpToken.address,\r\n        SPOOKY_ROUTER_ADDR,\r\n        this.myAccount,\r\n      );\r\n    }\r\n  }\r\n  async swapBBnbToCar(bbondAmount: BigNumber): Promise<TransactionResponse> {\r\n    const {CarSwapper} = this.contracts;\r\n    return await CarSwapper.swapBBnbToCar(bbondAmount);\r\n  }\r\n  async estimateAmountOfCar(bbondAmount: string): Promise<string> {\r\n    const {CarSwapper} = this.contracts;\r\n    try {\r\n      const estimateBN = await CarSwapper.estimateAmountOfCar(parseUnits(bbondAmount, 18));\r\n      return getDisplayBalance(estimateBN, 18, 6);\r\n    } catch (err) {\r\n      console.error(`Failed to fetch estimate sbnb amount: ${err}`);\r\n    }\r\n  }\r\n\r\n  async getCarSwapperStat(address: string): Promise<CarSwapperStat> {\r\n    const {CarSwapper} = this.contracts;\r\n    const carBalanceBN = await CarSwapper.getCarBalance();\r\n    const bbondBalanceBN = await CarSwapper.getBBnbBalance(address);\r\n    // const bnbmPriceBN = await CarSwapper.getBnbmPrice();\r\n    // const carPriceBN = await CarSwapper.getCarPrice();\r\n    const rateCarPerBnbmBN = await CarSwapper.getCarAmountPerBnbm();\r\n    const carBalance = getDisplayBalance(carBalanceBN, 18, 5);\r\n    const bbondBalance = getDisplayBalance(bbondBalanceBN, 18, 5);\r\n    return {\r\n      carBalance: carBalance.toString(),\r\n      bbondBalance: bbondBalance.toString(),\r\n      // bnbmPrice: bnbmPriceBN.toString(),\r\n      // carPrice: carPriceBN.toString(),\r\n      rateCarPerBnbm: rateCarPerBnbmBN.toString(),\r\n    };\r\n  }\r\n}\r\n","import React, {createContext, useEffect, useState} from 'react';\r\nimport {useWallet} from 'use-wallet';\r\nimport BnbmFinance from '../../bnbm-finance';\r\nimport config from '../../config';\r\n\r\nexport interface BnbmFinanceContext {\r\n  bnbmFinance?: BnbmFinance;\r\n}\r\n\r\nexport const Context = createContext<BnbmFinanceContext>({bnbmFinance: null});\r\n\r\nexport const BnbmFinanceProvider: React.FC = ({children}) => {\r\n  const {ethereum, account} = useWallet();\r\n  const [bnbmFinance, setBnbmFinance] = useState<BnbmFinance>();\r\n\r\n  useEffect(() => {\r\n    if (!bnbmFinance) {\r\n      const bnbm = new BnbmFinance(config);\r\n      if (account) {\r\n        // wallet was unlocked at initialization\r\n        bnbm.unlockWallet(ethereum, account);\r\n      }\r\n      setBnbmFinance(bnbm);\r\n    } else if (account) {\r\n      bnbmFinance.unlockWallet(ethereum, account);\r\n    }\r\n  }, [account, ethereum, bnbmFinance]);\r\n\r\n  return <Context.Provider value={{bnbmFinance}}>{children}</Context.Provider>;\r\n};\r\n","import {useContext} from 'react';\r\nimport {Context} from '../contexts/BnbmFinanceProvider';\r\n\r\nconst useBnbmFinance = () => {\r\n  const {bnbmFinance} = useContext(Context);\r\n  return bnbmFinance;\r\n};\r\n\r\nexport default useBnbmFinance;\r\n","import {createContext} from 'react';\r\nimport {Bank} from '../../bnbm-finance';\r\n\r\nexport interface BanksContext {\r\n  banks: Bank[];\r\n}\r\n\r\nconst context = createContext<BanksContext>({\r\n  banks: [],\r\n});\r\n\r\nexport default context;\r\n","import React, {useCallback, useEffect, useState} from 'react';\r\nimport Context from './context';\r\nimport useBnbmFinance from '../../hooks/useBnbmFinance';\r\nimport {Bank} from '../../bnbm-finance';\r\nimport config, {bankDefinitions} from '../../config';\r\n\r\nconst Banks: React.FC = ({children}) => {\r\n  const [banks, setBanks] = useState<Bank[]>([]);\r\n  const bnbmFinance = useBnbmFinance();\r\n  const isUnlocked = bnbmFinance?.isUnlocked;\r\n\r\n  const fetchPools = useCallback(async () => {\r\n    const banks: Bank[] = [];\r\n\r\n    for (const bankInfo of Object.values(bankDefinitions)) {\r\n      if (bankInfo.finished) {\r\n        if (!bnbmFinance.isUnlocked) continue;\r\n        \r\n        // only show pools staked by user\r\n        const balance = await bnbmFinance.stakedBalanceOnBank(\r\n          bankInfo.contract,\r\n          bankInfo.poolId,\r\n          bnbmFinance.myAccount,\r\n          );\r\n          \r\n        if (balance.lte(0)) {\r\n          continue;\r\n        }\r\n      }\r\n      banks.push({\r\n        ...bankInfo,\r\n        address: config.deployments[bankInfo.contract].address,\r\n        depositToken: bnbmFinance.externalTokens[bankInfo.depositTokenName],\r\n        earnToken: bankInfo.earnTokenName === 'BNBM' ? bnbmFinance.BNBM : bnbmFinance.SBNB,\r\n      });\r\n    }\r\n\r\n    banks.sort((a, b) => (a.sort > b.sort ? 1 : -1));\r\n    setBanks(banks);\r\n  }, [bnbmFinance, setBanks]);\r\n\r\n  useEffect(() => {\r\n    if (bnbmFinance) {\r\n      fetchPools().catch((err) => console.error(`Failed to fetch pools: ${err.stack}`));\r\n    }\r\n  }, [isUnlocked, bnbmFinance, fetchPools]);\r\n\r\n  return <Context.Provider value={{banks}}>{children}</Context.Provider>;\r\n};\r\n\r\nexport default Banks;\r\n","import {ChainId} from '@pancakeswap/sdk';\r\nimport {Configuration} from './bnbm-finance/config';\r\nimport {BankInfo} from './bnbm-finance';\r\n\r\nconst configurations: {[env: string]: Configuration} = {\r\n  development: {\r\n    chainId: 56,\r\n    networkName: 'BSC Mainnet',\r\n    ftmscanUrl: 'https://bscscan.com',\r\n    defaultProvider: 'https://bsc-dataseed.binance.org/',\r\n    deployments: require('./bnbm-finance/deployments/deployments.mainnet.json'),\r\n    externalTokens: {\r\n      WBNB: ['0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18],\r\n      FUSDT: ['0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56', 18], // This is actually BUSD on mainnet not fusdt\r\n      BUSD: ['0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56', 18],\r\n      FTM: ['0xad29abb318791d579433d831ed122afeaf29dcfe', 18],\r\n      ETH: ['0x2170ed0880ac9a755fd29b2688956bd959f933f8',18],\r\n      USDC: ['0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d', 18],\r\n      BTCB: ['0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c', 18],\r\n      DOGE: ['0xba2ae424d960c26247dd6c32edc70b295c744c43',8],\r\n      SHIB: ['0x2859e4544C4bB03966803b044A93563Bd2D0DD4D',18],\r\n      'USDT-BNB-LP': ['0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16', 18],\r\n      'BNBM-BNB-LP': ['0x89ea857cB13Cd6eDCf21628197A3D63512354726', 18],\r\n      'BNBS-BNB-LP': ['0x710cc6f1360FA5fBA917Cc475Da44C49545c1264', 18],\r\n    },\r\n    baseLaunchDate: new Date('2022-6-26 18:00:00Z'),\r\n    bondLaunchesAt: new Date('2022-6-27 18:00:00Z'),\r\n    heavenLaunchesAt: new Date('2022-3-19 01:00:00Z'),\r\n    refreshInterval: 10000,\r\n  },\r\n  production: {\r\n    chainId: 56,\r\n    networkName: 'BSC Mainnet',\r\n    ftmscanUrl: 'https://bscscan.com',\r\n    defaultProvider: 'https://bsc-dataseed.binance.org/',\r\n    deployments: require('./bnbm-finance/deployments/deployments.mainnet.json'),\r\n    externalTokens: {\r\n      WBNB: ['0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18],\r\n      FUSDT: ['0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56', 18], // This is actually BUSD on mainnet not fusdt\r\n      USDC: ['0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d', 18],\r\n\r\n      \r\n      BUSD: ['0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56', 18],\r\n      FTM: ['0xad29abb318791d579433d831ed122afeaf29dcfe', 18],\r\n      ETH: ['0x2170ed0880ac9a755fd29b2688956bd959f933f8',18],\r\n      BTCB: ['0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c', 18],\r\n      DOGE: ['0xba2ae424d960c26247dd6c32edc70b295c744c43',8],\r\n      SHIB: ['0x2859e4544C4bB03966803b044A93563Bd2D0DD4D',18],\r\n      'USDT-BNB-LP': ['0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16', 18],\r\n\r\n      'BNBM-BNB-LP': ['0x89ea857cB13Cd6eDCf21628197A3D63512354726', 18],\r\n      'BNBS-BNB-LP': ['0x710cc6f1360FA5fBA917Cc475Da44C49545c1264', 18],\r\n    },\r\n    baseLaunchDate: new Date('2022-6-26 18:00:00Z'),\r\n    bondLaunchesAt: new Date('2022-6-27 18:00:00Z'),\r\n    heavenLaunchesAt: new Date('2022-3-19 01:00:00Z'),\r\n    refreshInterval: 10000,\r\n  },\r\n};\r\n\r\nexport const bankDefinitions: {[contractName: string]: BankInfo} = {\r\n  BnbmWBNBGenesisRewardPool: {\r\n    name: 'Earn BNBM by WBNB',\r\n    poolId: 0,\r\n    sectionInUI: 0,\r\n    contract: 'BnbmWBNBGenesisRewardPool',\r\n    depositTokenName: 'WBNB',\r\n    earnTokenName: 'BNBM',\r\n    finished: false,\r\n    sort: 1,\r\n    closedForStaking: false,\r\n    fee: 0,\r\n    alloc: 70,\r\n  },\r\n\r\n  BnbmBnbLPBnbmRewardPool: {\r\n    name: 'Earn BNBM by BNBM-BNB LP',\r\n    poolId: 1,\r\n    sectionInUI: 0,\r\n    contract: 'BnbmBnbLPBnbmRewardPool',\r\n    depositTokenName: 'BNBM-BNB-LP',\r\n    earnTokenName: 'BNBM',\r\n    finished: false,\r\n    sort: 8,\r\n    closedForStaking: false,\r\n    fee: 0,\r\n    alloc: 30,\r\n  },\r\n\r\n  BNBMLPBNBSPOOL: {\r\n    name: 'Earn BNBS by BNBM-BNB LP',\r\n    poolId: 0,\r\n    sectionInUI: 2,\r\n    contract: 'BNBMLPBNBSPOOL',\r\n    depositTokenName: 'BNBM-BNB-LP',\r\n    earnTokenName: 'SBNB',\r\n    finished: false,\r\n    sort: 1,\r\n    closedForStaking: false,\r\n    fee: 0,\r\n    alloc: 70,\r\n  },\r\n  BNBSLPBNBSPOOL: {\r\n    name: 'Earn BNBS by BNBS-BNB LP',\r\n    poolId: 1,\r\n    sectionInUI: 2,\r\n    contract: 'BNBSLPBNBSPOOL',\r\n    depositTokenName: 'BNBS-BNB-LP',\r\n    earnTokenName: 'SBNB',\r\n    finished: false,\r\n    sort: 2,\r\n    closedForStaking: false,\r\n    fee: 0,\r\n    alloc: 30,\r\n  },\r\n  \r\n};\r\n\r\nexport default configurations[process.env.NODE_ENV || 'development'];\r\n","import React, {createContext, useCallback, useState} from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface ModalsContext {\r\n  content?: React.ReactNode;\r\n  isOpen?: boolean;\r\n  onPresent: (content: React.ReactNode) => void;\r\n  onDismiss: () => void;\r\n}\r\n\r\nexport const Context = createContext<ModalsContext>({\r\n  onPresent: () => {},\r\n  onDismiss: () => {},\r\n});\r\n\r\nconst Modals: React.FC = ({children}) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [content, setContent] = useState<React.ReactNode>();\r\n\r\n  const handlePresent = useCallback(\r\n    (modalContent: React.ReactNode) => {\r\n      setContent(modalContent);\r\n      setIsOpen(true);\r\n    },\r\n    [setContent, setIsOpen],\r\n  );\r\n\r\n  const handleDismiss = useCallback(() => {\r\n    setContent(undefined);\r\n    setIsOpen(false);\r\n  }, [setContent, setIsOpen]);\r\n\r\n  return (\r\n    <Context.Provider\r\n      value={{\r\n        content,\r\n        isOpen,\r\n        onPresent: handlePresent,\r\n        onDismiss: handleDismiss,\r\n      }}\r\n    >\r\n      {children}\r\n      {isOpen && (\r\n        <StyledModalWrapper>\r\n          <StyledModalBackdrop onClick={handleDismiss} />\r\n          {React.isValidElement(content) &&\r\n            React.cloneElement(content, {\r\n              onDismiss: handleDismiss,\r\n            })}\r\n        </StyledModalWrapper>\r\n      )}\r\n    </Context.Provider>\r\n  );\r\n};\r\n\r\nconst StyledModalWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: center;\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n`;\r\n\r\nconst StyledModalBackdrop = styled.div`\r\n  background-color: #00000088;\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n`;\r\n\r\nexport default Modals;\r\n","import React, {useState, useEffect} from 'react';\r\n\r\nconst FAST_INTERVAL = 10000;\r\nconst SLOW_INTERVAL = 60000;\r\n\r\nexport const RefreshContext = React.createContext({slow: 0, fast: 0});\r\n\r\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\r\nexport const RefreshContextProvider: React.FC = ({children}) => {\r\n  const [slow, setSlow] = useState(0);\r\n  const [fast, setFast] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setFast((prev) => prev + 1);\r\n    }, FAST_INTERVAL);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setSlow((prev) => prev + 1);\r\n    }, SLOW_INTERVAL);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return <RefreshContext.Provider value={{slow, fast}}>{children}</RefreshContext.Provider>;\r\n};\r\n","import {createAction} from '@reduxjs/toolkit';\r\n\r\nexport type PopupContent = {\r\n  txn?: {\r\n    hash: string;\r\n    success: boolean;\r\n    summary?: string;\r\n  };\r\n  error?: {\r\n    message: string;\r\n    stack: string;\r\n  };\r\n};\r\n\r\nexport const updateBlockNumber = createAction<{chainId: number; blockNumber: number}>('app/updateBlockNumber');\r\n\r\nexport const toggleWalletModal = createAction<void>('app/toggleWalletModal');\r\n\r\nexport const toggleSettingsMenu = createAction<void>('app/toggleSettingsMenu');\r\n\r\nexport const addPopup = createAction<{\r\n  key?: string;\r\n  removeAfterMs?: number | null;\r\n  content: PopupContent;\r\n}>('app/addPopup');\r\n\r\nexport const removePopup = createAction<{key: string}>('app/removePopup');\r\n","import {useEffect, useState} from 'react';\r\nimport config from './../config';\r\n\r\nconst usePromptNetwork = () => {\r\n  const [networkPrompt, setNetworkPrompt] = useState(false);\r\n  const {ethereum} = window as any;\r\n\r\n  /**\r\n   * For more read https://github.com/NoahZinsmeister/web3-react/blob/6737868693adb7e1e28ae80499e19901e9aae45a/example/hooks.ts#L33\r\n   * And https://docs.metamask.io/guide/ethereum-provider.html\r\n   * @param provider ethereum provider in this case is the window.ethereum available due to metamask being installed\r\n   * @returns\r\n   */\r\n  const connectToNetwork = async (provider: any) => {\r\n    await provider.request({\r\n      method: 'wallet_addEthereumChain',\r\n      params: [\r\n        {\r\n          chainId: `0x${config.chainId.toString(16)}`,\r\n          chainName: config.networkName,\r\n          nativeCurrency: {\r\n            name: 'BNB',\r\n            symbol: 'BNB',\r\n            decimals: 18,\r\n          },\r\n          rpcUrls: [config.defaultProvider],\r\n          blockExplorerUrls: [config.ftmscanUrl],\r\n        },\r\n      ],\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    if (!networkPrompt) {\r\n      if (ethereum && ethereum.networkVersion !== config.chainId.toString()) {\r\n        connectToNetwork(ethereum);\r\n        setNetworkPrompt(true);\r\n      }\r\n    }\r\n  }, [networkPrompt, ethereum]);\r\n};\r\n\r\nexport default usePromptNetwork;\r\n","import {createReducer} from '@reduxjs/toolkit';\r\nimport {\r\n  addTransaction,\r\n  checkedTransaction,\r\n  clearAllTransactions,\r\n  finalizeTransaction,\r\n  SerializableTransactionReceipt,\r\n} from './actions';\r\n\r\nconst now = () => new Date().getTime();\r\n\r\nexport interface TransactionDetails {\r\n  hash: string;\r\n  approval?: {tokenAddress: string; spender: string};\r\n  summary?: string;\r\n  receipt?: SerializableTransactionReceipt;\r\n  lastCheckedBlockNumber?: number;\r\n  addedTime: number;\r\n  confirmedTime?: number;\r\n  from: string;\r\n}\r\n\r\nexport interface TransactionState {\r\n  [chainId: number]: {\r\n    [txHash: string]: TransactionDetails;\r\n  };\r\n}\r\n\r\nexport const initialState: TransactionState = {};\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(addTransaction, (transactions, {payload: {chainId, from, hash, approval, summary}}) => {\r\n      if (transactions[chainId]?.[hash]) {\r\n        throw Error('Attempted to add existing transaction.');\r\n      }\r\n      const txs = transactions[chainId] ?? {};\r\n      txs[hash] = {hash, approval, summary, from, addedTime: now()};\r\n      transactions[chainId] = txs;\r\n    })\r\n    .addCase(clearAllTransactions, (transactions, {payload: {chainId}}) => {\r\n      if (!transactions[chainId]) return;\r\n      transactions[chainId] = {};\r\n    })\r\n    .addCase(checkedTransaction, (transactions, {payload: {chainId, hash, blockNumber}}) => {\r\n      const tx = transactions[chainId]?.[hash];\r\n      if (!tx) {\r\n        return;\r\n      }\r\n      if (!tx.lastCheckedBlockNumber) {\r\n        tx.lastCheckedBlockNumber = blockNumber;\r\n      } else {\r\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber);\r\n      }\r\n    })\r\n    .addCase(finalizeTransaction, (transactions, {payload: {hash, chainId, receipt}}) => {\r\n      const tx = transactions[chainId]?.[hash];\r\n      if (!tx) {\r\n        return;\r\n      }\r\n      tx.receipt = receipt;\r\n      tx.confirmedTime = now();\r\n    }),\r\n);\r\n","import {createReducer, nanoid} from '@reduxjs/toolkit';\r\nimport {addPopup, PopupContent, removePopup, toggleWalletModal, toggleSettingsMenu, updateBlockNumber} from './actions';\r\n\r\ntype PopupList = Array<{\r\n  key: string;\r\n  show: boolean;\r\n  content: PopupContent;\r\n  removeAfterMs: number | null;\r\n}>;\r\n\r\nexport interface ApplicationState {\r\n  blockNumber: {[chainId: number]: number};\r\n  popupList: PopupList;\r\n  walletModalOpen: boolean;\r\n  settingsMenuOpen: boolean;\r\n}\r\n\r\nconst initialState: ApplicationState = {\r\n  blockNumber: {},\r\n  popupList: [],\r\n  walletModalOpen: false,\r\n  settingsMenuOpen: false,\r\n};\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(updateBlockNumber, (state, action) => {\r\n      const {chainId, blockNumber} = action.payload;\r\n      if (typeof state.blockNumber[chainId] !== 'number') {\r\n        state.blockNumber[chainId] = blockNumber;\r\n      } else {\r\n        state.blockNumber[chainId] = Math.max(blockNumber, state.blockNumber[chainId]);\r\n      }\r\n    })\r\n    .addCase(toggleWalletModal, (state) => {\r\n      state.walletModalOpen = !state.walletModalOpen;\r\n    })\r\n    .addCase(toggleSettingsMenu, (state) => {\r\n      state.settingsMenuOpen = !state.settingsMenuOpen;\r\n    })\r\n    .addCase(addPopup, (state, {payload: {content, key, removeAfterMs = 15000}}) => {\r\n      state.popupList = (key ? state.popupList.filter((popup) => popup.key !== key) : state.popupList).concat([\r\n        {\r\n          key: key || nanoid(),\r\n          show: true,\r\n          content,\r\n          removeAfterMs,\r\n        },\r\n      ]);\r\n    })\r\n    .addCase(removePopup, (state, {payload: {key}}) => {\r\n      state.popupList.forEach((p) => {\r\n        if (p.key === key) {\r\n          p.show = false;\r\n        }\r\n      });\r\n    }),\r\n);\r\n","import {configureStore, getDefaultMiddleware} from '@reduxjs/toolkit';\r\nimport {save, load} from 'redux-localstorage-simple';\r\nimport transactions from './transactions/reducer';\r\nimport application from './application/reducer';\r\n\r\nconst PERSISTED_KEYS: string[] = ['transactions'];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    application,\r\n    transactions,\r\n  },\r\n  middleware: [...getDefaultMiddleware({thunk: false}), save({states: PERSISTED_KEYS})],\r\n  preloadedState: load({states: PERSISTED_KEYS}),\r\n});\r\n\r\nexport default store;\r\n\r\nexport type AppState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n","export const white = '#FFF';\r\nexport const black = '#000';\r\n\r\nexport const green = {\r\n  500: '#00D110',\r\n};\r\n\r\nexport const purple = {\r\n  200: '#bd7cfe',\r\n  400: '#ab47bc',\r\n  700: '#7b1fa2',\r\n};\r\n\r\nexport const yellow = {\r\n  200: '#ffdb4d',\r\n  400: '#ab47bc',\r\n  700: '#e6b800',\r\n};\r\n\r\nexport const red = {\r\n  100: '#C1C1FF',\r\n  200: '#7575FF',\r\n  500: '#fbe809',\r\n};\r\n\r\nexport const grey = {\r\n  100: '#f5f5f5',\r\n  200: '#eeeeee',\r\n  300: '#e0e0e0',\r\n  400: '#bdbdbd',\r\n  500: '#9e9e9e',\r\n  600: '#757575',\r\n  700: '#616161',\r\n  800: '#424242',\r\n  900: '#212121',\r\n};\r\n\r\nexport const bg = '#000000';\r\n\r\nexport const teal = {\r\n  200: '#64ffda',\r\n};\r\n\r\nexport const newNavy = {\r\n  200: '171923',\r\n};\r\n","import {black, teal, grey, red, white, yellow, newNavy} from './colors';\r\n\r\nconst theme = {\r\n  borderRadius: 13,\r\n  color: {\r\n    black,\r\n    grey,\r\n    yellow,\r\n    primary: {\r\n      light: red[200],\r\n      main: red[500],\r\n    },\r\n    secondary: {\r\n      main: teal[200],\r\n    },\r\n    white,\r\n    teal,\r\n    newNavy,\r\n  },\r\n  siteWidth: 1200,\r\n  spacing: {\r\n    1: 4,\r\n    2: 8,\r\n    3: 16,\r\n    4: 24,\r\n    5: 32,\r\n    6: 48,\r\n    7: 64,\r\n  },\r\n  topBarSize: 72,\r\n};\r\n\r\nexport default theme;\r\n","//Your theme for the new stuff using material UI has been copied here so it doesn't conflict\r\nimport { createTheme } from '@material-ui/core/styles';\r\n\r\nconst newTheme = createTheme({\r\n  palette: {\r\n    type: 'light',\r\n    text: {\r\n      primary: '#dddfee',\r\n      secondary: 'white',\r\n      yellow: '#fba919',\r\n    },\r\n    background: {\r\n      default: '#121212',\r\n      paper: '#00000060',\r\n    },\r\n    primary: {\r\n      light: '#ffffff',\r\n      main: 'rgb(176, 99, 255)',\r\n      dark: '#f090ff',\r\n      contrastText: '#fff',\r\n    },\r\n    secondary: {\r\n      light: '#ff7961',\r\n      main: '#cde6d2',\r\n      dark: '#370548',\r\n      contrastText: '#000',\r\n    },\r\n    action: {\r\n      disabledBackground: '#aaaaaa',\r\n      active: '#000',\r\n      hover: '#fff',\r\n    },\r\n  },\r\n  typography: {\r\n    color: '#2c2560',\r\n    fontFamily: \"stretchProBasic\",\r\n  },\r\n});\r\n\r\nexport default newTheme;\r\n","import {useCallback, useEffect, useState} from 'react';\r\n\r\nconst VISIBILITY_STATE_SUPPORTED = 'visibilityState' in document;\r\n\r\nfunction isWindowVisible() {\r\n  return !VISIBILITY_STATE_SUPPORTED || document.visibilityState !== 'hidden';\r\n}\r\n\r\n/**\r\n * Returns whether the window is currently visible to the user.\r\n */\r\nexport default function useIsWindowVisible(): boolean {\r\n  const [focused, setFocused] = useState<boolean>(isWindowVisible());\r\n  const listener = useCallback(() => {\r\n    setFocused(isWindowVisible());\r\n  }, [setFocused]);\r\n\r\n  useEffect(() => {\r\n    if (!VISIBILITY_STATE_SUPPORTED) return undefined;\r\n\r\n    document.addEventListener('visibilitychange', listener);\r\n    return () => {\r\n      document.removeEventListener('visibilitychange', listener);\r\n    };\r\n  }, [listener]);\r\n\r\n  return focused;\r\n}\r\n","import {useCallback, useEffect, useState} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport {useWallet} from 'use-wallet';\r\nimport useDebounce from '../../hooks/useDebounce';\r\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible';\r\nimport {updateBlockNumber} from './actions';\r\nimport {getDefaultProvider} from '../../utils/provider';\r\n\r\nexport default function Updater(): null {\r\n  const {ethereum, chainId} = useWallet();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const windowVisible = useIsWindowVisible();\r\n\r\n  const [state, setState] = useState<{\r\n    chainId: number | undefined;\r\n    blockNumber: number | null;\r\n  }>({\r\n    chainId,\r\n    blockNumber: null,\r\n  });\r\n\r\n  const blockNumberCallback = useCallback(\r\n    (blockNumber: number) => {\r\n      setState((state) => {\r\n        if (chainId === state.chainId) {\r\n          if (typeof state.blockNumber !== 'number') return {chainId, blockNumber};\r\n          return {chainId, blockNumber: Math.max(blockNumber, state.blockNumber)};\r\n        }\r\n        return state;\r\n      });\r\n    },\r\n    [chainId, setState],\r\n  );\r\n\r\n  // attach/detach listeners\r\n  // @ts-ignore\r\n  useEffect(() => {\r\n    if (!ethereum || !chainId || !windowVisible) return undefined;\r\n    setState({chainId, blockNumber: null});\r\n\r\n    const provider = getDefaultProvider();\r\n    provider\r\n      .getBlockNumber()\r\n      .then(blockNumberCallback)\r\n      .catch((error) => console.error(`Failed to get block number for chainId: ${chainId}`, error));\r\n\r\n    provider.on('block', blockNumberCallback);\r\n    return () => provider.removeListener('block', blockNumberCallback);\r\n  }, [dispatch, chainId, ethereum, blockNumberCallback, windowVisible]);\r\n\r\n  const debouncedState = useDebounce(state, 100);\r\n\r\n  useEffect(() => {\r\n    if (!debouncedState.chainId || !debouncedState.blockNumber || !windowVisible) return;\r\n    dispatch(\r\n      updateBlockNumber({\r\n        chainId: debouncedState.chainId,\r\n        blockNumber: debouncedState.blockNumber,\r\n      }),\r\n    );\r\n  }, [windowVisible, dispatch, debouncedState.blockNumber, debouncedState.chainId]);\r\n\r\n  return null;\r\n}\r\n","import {useEffect, useState} from 'react';\r\n\r\n// modified from https://usehooks.com/useDebounce/\r\nexport default function useDebounce<T>(value: T, delay: number): T {\r\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\r\n\r\n  useEffect(() => {\r\n    // Update debounced value after delay\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n\r\n    // Cancel the timeout if value changes (also on delay change or unmount)\r\n    // This is how we prevent debounced value from updating if value is changed ...\r\n    // .. within the delay period. Timeout gets cleared and restarted.\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value, delay]);\r\n\r\n  return debouncedValue;\r\n}\r\n","import {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {useWallet} from 'use-wallet';\r\nimport {useAddPopup, useBlockNumber} from '../application/hooks';\r\nimport {AppDispatch, AppState} from '../index';\r\nimport {checkedTransaction, finalizeTransaction} from './actions';\r\nimport {getDefaultProvider} from '../../utils/provider';\r\n\r\nexport function shouldCheck(\r\n  lastBlockNumber: number,\r\n  tx: {addedTime: number; receipt?: {}; lastCheckedBlockNumber?: number},\r\n): boolean {\r\n  if (tx.receipt) return false;\r\n  if (!tx.lastCheckedBlockNumber) return true;\r\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber;\r\n  if (blocksSinceCheck < 1) return false;\r\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60;\r\n  if (minutesPending > 60) {\r\n    // every 10 blocks if pending for longer than an hour\r\n    return blocksSinceCheck > 9;\r\n  } else if (minutesPending > 5) {\r\n    // every 3 blocks if pending more than 5 minutes\r\n    return blocksSinceCheck > 2;\r\n  } else {\r\n    // otherwise every block\r\n    return true;\r\n  }\r\n}\r\n\r\nexport default function Updater(): null {\r\n  const {chainId, ethereum} = useWallet();\r\n\r\n  const lastBlockNumber = useBlockNumber();\r\n\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\r\n\r\n  const transactions = chainId ? state[chainId] ?? {} : {};\r\n\r\n  // show popup on confirm\r\n  const addPopup = useAddPopup();\r\n\r\n  useEffect(() => {\r\n    if (!chainId || !ethereum || !lastBlockNumber) {\r\n      return;\r\n    }\r\n\r\n    const provider = getDefaultProvider();\r\n    Object.keys(transactions)\r\n      .filter((hash) => shouldCheck(lastBlockNumber, transactions[hash]))\r\n      .forEach((hash) => {\r\n        provider\r\n          .getTransactionReceipt(hash)\r\n          .then((receipt) => {\r\n            if (receipt) {\r\n              dispatch(\r\n                finalizeTransaction({\r\n                  chainId,\r\n                  hash,\r\n                  receipt: {\r\n                    blockHash: receipt.blockHash,\r\n                    blockNumber: receipt.blockNumber,\r\n                    contractAddress: receipt.contractAddress,\r\n                    from: receipt.from,\r\n                    status: receipt.status,\r\n                    to: receipt.to,\r\n                    transactionHash: receipt.transactionHash,\r\n                    transactionIndex: receipt.transactionIndex,\r\n                  },\r\n                }),\r\n              );\r\n\r\n              addPopup(\r\n                {\r\n                  txn: {\r\n                    hash,\r\n                    success: receipt.status === 1,\r\n                    summary: transactions[hash]?.summary,\r\n                  },\r\n                },\r\n                hash,\r\n              );\r\n            } else {\r\n              dispatch(checkedTransaction({chainId, hash, blockNumber: lastBlockNumber}));\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.error(`failed to check transaction hash: ${hash}`, error);\r\n          });\r\n      });\r\n  }, [chainId, ethereum, transactions, lastBlockNumber, dispatch, addPopup]);\r\n\r\n  return null;\r\n}\r\n","import React from 'react';\r\nimport ApplicationUpdater from './application/updater';\r\nimport TransactionUpdater from './transactions/updater';\r\n\r\nconst Updaters = () => (\r\n  <>\r\n    <ApplicationUpdater />\r\n    <TransactionUpdater />\r\n  </>\r\n);\r\n\r\nexport default Updaters;\r\n","import Loader from './Loader';\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {white} from '../../theme/colors';\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div\r\n      style={{\r\n        position: 'absolute',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        color: 'white',\r\n      }}\r\n    >\r\n      <Typography>Loading</Typography>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React, {useContext} from 'react';\r\nimport {AlertCircle, CheckCircle} from 'react-feather';\r\nimport styled, {ThemeContext} from 'styled-components';\r\nimport {useWallet} from 'use-wallet';\r\nimport config from '../../config';\r\n\r\nconst RowNoFlex = styled.div`\r\n  flex-wrap: nowrap;\r\n`;\r\n\r\nexport default function TransactionPopup({\r\n  hash,\r\n  success,\r\n  summary,\r\n}: {\r\n  hash: string;\r\n  success?: boolean;\r\n  summary?: string;\r\n}) {\r\n  const {chainId} = useWallet();\r\n  const theme = useContext(ThemeContext);\r\n\r\n  return (\r\n    <RowNoFlex>\r\n      <div style={{paddingRight: 16}}>\r\n        {success ? <CheckCircle color={theme.color.teal[200]} size={24} /> : <AlertCircle color=\"#FF6871\" size={24} />}\r\n      </div>\r\n      <div>\r\n        <StyledPopupDesc>{summary ?? 'Hash: ' + hash.slice(0, 8) + '...' + hash.slice(58, 65)}</StyledPopupDesc>\r\n        {chainId && (\r\n          <StyledLink target=\"_blank\" href={`${config.ftmscanUrl}/tx/${hash}`}>\r\n            View on BSCscan\r\n          </StyledLink>\r\n        )}\r\n      </div>\r\n    </RowNoFlex>\r\n  );\r\n}\r\n\r\nconst StyledPopupDesc = styled.span`\r\n  font-weight: 500;\r\n  color: ${(props) => props.theme.color.grey[300]};\r\n`;\r\n\r\nconst StyledLink = styled.a`\r\n  color: ${(props) => props.theme.color.grey[500]};\r\n`;\r\n","import React, {useCallback} from 'react';\r\nimport {AlertCircle} from 'react-feather';\r\nimport styled from 'styled-components';\r\n\r\nconst RowNoFlex = styled.div`\r\n  flex-wrap: nowrap;\r\n`;\r\n\r\nexport default function ErrorPopup({message, stack}: {message: string; stack: string}) {\r\n  const copyErrorDetails = useCallback(async () => {\r\n    await navigator.clipboard.writeText(`${message}\\n${stack}`);\r\n  }, [message, stack]);\r\n\r\n  return (\r\n    <RowNoFlex>\r\n      <div style={{paddingRight: 16}}>\r\n        <AlertCircle color=\"#FF6871\" size={24} />\r\n      </div>\r\n      <div>\r\n        <StyledPopupDesc>{message}</StyledPopupDesc>\r\n        <StyledLink onClick={copyErrorDetails} href=\"#\">\r\n          Copy error details\r\n        </StyledLink>\r\n      </div>\r\n    </RowNoFlex>\r\n  );\r\n}\r\n\r\nconst StyledPopupDesc = styled.span`\r\n  font-weight: 500;\r\n  color: ${(props) => props.theme.color.grey[300]};\r\n`;\r\n\r\nconst StyledLink = styled.a`\r\n  color: ${(props) => props.theme.color.grey[500]};\r\n`;\r\n","import React, {useCallback, useContext, useEffect} from 'react';\r\nimport {X} from 'react-feather';\r\nimport {useSpring} from 'react-spring/web';\r\nimport styled, {ThemeContext} from 'styled-components';\r\nimport {animated} from 'react-spring';\r\nimport {PopupContent} from '../../state/application/actions';\r\nimport {useRemovePopup} from '../../state/application/hooks';\r\nimport TransactionPopup from './TransactionPopup';\r\nimport ErrorPopup from './ErrorPopup';\r\n\r\nexport const StyledClose = styled(X)`\r\n  position: absolute;\r\n  right: 10px;\r\n  top: 10px;\r\n\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\nexport const Popup = styled.div`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 1em;\r\n  background-color: ${({theme}) => theme.color.grey[700]};\r\n  position: relative;\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  padding-right: 35px;\r\n  overflow: hidden;\r\n\r\n  @media (max-width: 768px) {\r\n    min-width: 290px;\r\n  }\r\n`;\r\nconst Fader = styled.div`\r\n  position: absolute;\r\n  bottom: 0px;\r\n  left: 0px;\r\n  width: 100%;\r\n  height: 2px;\r\n  background-color: ${({theme}) => theme.color.grey[400]};\r\n`;\r\n\r\nconst AnimatedFader = animated(Fader);\r\n\r\nexport default function PopupItem({\r\n  removeAfterMs,\r\n  content,\r\n  popKey,\r\n}: {\r\n  removeAfterMs: number | null;\r\n  content: PopupContent;\r\n  popKey: string;\r\n}) {\r\n  const removePopup = useRemovePopup();\r\n  const removeThisPopup = useCallback(() => removePopup(popKey), [popKey, removePopup]);\r\n  useEffect(() => {\r\n    if (removeAfterMs === null) return undefined;\r\n\r\n    const timeout = setTimeout(() => {\r\n      removeThisPopup();\r\n    }, removeAfterMs);\r\n\r\n    return () => {\r\n      clearTimeout(timeout);\r\n    };\r\n  }, [removeAfterMs, removeThisPopup]);\r\n\r\n  const theme = useContext(ThemeContext);\r\n\r\n  let popupContent;\r\n  if ('txn' in content) {\r\n    const {\r\n      txn: {hash, success, summary},\r\n    } = content;\r\n    popupContent = <TransactionPopup hash={hash} success={success} summary={summary} />;\r\n  }\r\n  if ('error' in content) {\r\n    const {\r\n      error: {message, stack},\r\n    } = content;\r\n    popupContent = <ErrorPopup message={message} stack={stack} />;\r\n  }\r\n\r\n  const faderStyle = useSpring({\r\n    from: {width: '100%'},\r\n    to: {width: '0%'},\r\n    config: {duration: removeAfterMs ?? undefined},\r\n  });\r\n\r\n  return (\r\n    <Popup>\r\n      <StyledClose color={theme.text2} onClick={removeThisPopup} />\r\n      {popupContent}\r\n      {removeAfterMs !== null ? <AnimatedFader style={faderStyle} /> : null}\r\n    </Popup>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {useActivePopups} from '../../state/application/hooks';\r\nimport PopupItem from './PopupItem';\r\n\r\nconst MobilePopupWrapper = styled.div<{height: string | number}>`\r\n  position: relative;\r\n  max-width: 100%;\r\n  height: ${({height}) => height};\r\n  margin: ${({height}) => (height ? '0 auto;' : 0)};\r\n  margin-bottom: ${({height}) => (height ? '20px' : 0)}};\r\n\r\n  display: none;\r\n  @media (max-width: 768px) {\r\n    display: block;\r\n  };\r\n`;\r\n\r\nconst MobilePopupInner = styled.div`\r\n  height: 99%;\r\n  overflow-x: auto;\r\n  overflow-y: hidden;\r\n  display: flex;\r\n  flex-direction: row;\r\n  -webkit-overflow-scrolling: touch;\r\n  ::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nconst FixedPopupColumn = styled.div`\r\n  position: fixed;\r\n  top: 64px;\r\n  margin-right: 24px;\r\n  right: 3rem;\r\n  max-width: 355px !important;\r\n  width: 100%;\r\n  z-index: 2;\r\n\r\n  @media (max-width: 768px) {\r\n    display: none;\r\n  } ;\r\n`;\r\n\r\nexport default function Popups() {\r\n  // get all popups\r\n  const activePopups = useActivePopups();\r\n\r\n  return (\r\n    <>\r\n      <FixedPopupColumn>\r\n        {activePopups.map((item) => (\r\n          <PopupItem key={item.key} content={item.content} popKey={item.key} removeAfterMs={item.removeAfterMs} />\r\n        ))}\r\n      </FixedPopupColumn>\r\n      <MobilePopupWrapper height={activePopups?.length > 0 ? 'fit-content' : 0}>\r\n        <MobilePopupInner>\r\n          {activePopups // reverse so new items up front\r\n            .slice(0)\r\n            .reverse()\r\n            .map((item) => (\r\n              <PopupItem key={item.key} content={item.content} popKey={item.key} removeAfterMs={item.removeAfterMs} />\r\n            ))}\r\n        </MobilePopupInner>\r\n      </MobilePopupWrapper>\r\n    </>\r\n  );\r\n}\r\n","import React, {Suspense, lazy} from 'react';\r\nimport {Provider} from 'react-redux';\r\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport {ThemeProvider as TP} from '@material-ui/core/styles';\r\nimport {ThemeProvider as TP1} from 'styled-components';\r\nimport {UseWalletProvider} from 'use-wallet';\r\nimport usePromptNetwork from './hooks/useNetworkPrompt';\r\nimport BanksProvider from './contexts/Banks';\r\nimport BnbmFinanceProvider from './contexts/BnbmFinanceProvider';\r\nimport ModalsProvider from './contexts/Modals';\r\nimport store from './state';\r\nimport theme from './theme';\r\nimport newTheme from './newTheme';\r\nimport config from './config';\r\nimport Updaters from './state/Updaters';\r\nimport Loader from './components/Loader';\r\nimport Popups from './components/Popups';\r\nimport ParticleBackground from './ParticalBackground';\r\n//import Regulations from './views/Regulations/Regulations';\r\nimport {RefreshContextProvider} from './contexts/RefreshContext';\r\n\r\nconst Home = lazy(() => import('./views/Home'));\r\nconst Moon = lazy(() => import('./views/Moon'));\r\nconst Heaven = lazy(() => import('./views/Heaven'));\r\nconst Bond = lazy(() => import('./views/Bond'));\r\n// const SBS = lazy(() => import('./views/Sbs'));\r\nconst Liquidity = lazy(() => import('./views/Liquidity'));\r\n\r\nconst NoMatch = () => (\r\n  <h3 style={{color: 'white', position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)'}}>\r\n    Coming soon\r\n  </h3>\r\n);\r\n\r\nconst App: React.FC = () => {\r\n  // Clear localStorage for mobile users\r\n  if (typeof localStorage.version_app === 'undefined' || localStorage.version_app !== '1.1') {\r\n    localStorage.clear();\r\n    localStorage.setItem('connectorId', '');\r\n    localStorage.setItem('version_app', '1.1');\r\n  }\r\n\r\n  usePromptNetwork();\r\n\r\n  return (\r\n    <Providers>\r\n      {/* <ParticleBackground/> */}\r\n      <Router>\r\n        <Suspense fallback={<Loader />}>\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <Home />\r\n            </Route>\r\n            <Route path=\"/tier1\">\r\n              <Moon />\r\n            </Route>\r\n            <Route path=\"/tier2\">\r\n              <Heaven />\r\n            </Route>\r\n            <Route path=\"/tier3\">\r\n              <Bond />\r\n            </Route>\r\n            {/* <Route path=\"/liquidity\">\r\n              <Liquidity />\r\n            </Route> */}\r\n            <Route path=\"*\">\r\n              <NoMatch />\r\n            </Route>\r\n          </Switch>\r\n        </Suspense>\r\n      </Router>\r\n    </Providers>\r\n  );\r\n};\r\n\r\nconst Providers: React.FC = ({children}) => {\r\n  return (\r\n    <TP1 theme={theme}>\r\n      <TP theme={newTheme}>\r\n        <UseWalletProvider\r\n                    chainId={config.chainId}\r\n\r\n          connectors={{\r\n            walletconnect: {rpcUrl: config.defaultProvider},\r\n            walletlink: {\r\n              url: config.defaultProvider,\r\n              appName: 'bnbm.finance',\r\n              appLogoUrl: 'https://raw.githubusercontent.com/bnbmmoney/bnbm-assets/master/bnbm-512.png',\r\n            },\r\n          }}\r\n        >\r\n          <Provider store={store}>\r\n            <Updaters />\r\n            <RefreshContextProvider>\r\n              <BnbmFinanceProvider>\r\n                <ModalsProvider>\r\n                  <BanksProvider>\r\n                    <>\r\n                      <Popups />\r\n                      {children}\r\n                    </>\r\n                  </BanksProvider>\r\n                </ModalsProvider>\r\n              </BnbmFinanceProvider>\r\n            </RefreshContextProvider>\r\n          </Provider>\r\n        </UseWalletProvider>\r\n      </TP>\r\n    </TP1>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: {'Service-Worker': 'script'},\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","export const BNBM_TICKER = 'BNBM';\r\nexport const SBNB_TICKER = 'SBNB';\r\nexport const BBNB_TICKER = 'BBNB';\r\nexport const BNB_TICKER = 'BNB';\r\nexport const WBNB_TICKER = 'WBNB';\r\nexport const BTC_TICKER = 'BTCB';\r\n\r\nexport const SPOOKY_ROUTER_ADDR = '0x10ED43C718714eb63d5aA57B78B54704E256024E';\r\nexport const ZAPPER_ROUTER_ADDR = '0xA0C5F779e52A8D9a81aF17Dd910577946B6810F6';\r\nexport const TAX_OFFICE_ADDR = '0x2A637BEE0D76136d8ee44B96cf0A5f9198657AaF';\r\n","import {Deployments} from './deployments';\r\nimport {ChainId} from '@pancakeswap/sdk';\r\n\r\nexport type Configuration = {\r\n  chainId: ChainId;\r\n  networkName: string;\r\n  ftmscanUrl: string;\r\n  defaultProvider: string;\r\n  deployments: Deployments;\r\n  externalTokens: {[contractName: string]: [string, number]};\r\n  config?: EthereumConfig;\r\n\r\n  baseLaunchDate: Date;\r\n  bondLaunchesAt: Date;\r\n  heavenLaunchesAt: Date;\r\n\r\n  refreshInterval: number;\r\n};\r\n\r\nexport type EthereumConfig = {\r\n  testing: boolean;\r\n  autoGasMultiplier: number;\r\n  defaultConfirmations: number;\r\n  defaultGas: string;\r\n  defaultGasPrice: string;\r\n  ethereumNodeTimeout: number;\r\n};\r\n\r\nexport const defaultEthereumConfig = {\r\n  testing: false,\r\n  autoGasMultiplier: 1.5,\r\n  defaultConfirmations: 3,\r\n  defaultGas: '6000000',\r\n  defaultGasPrice: '7000000000000',\r\n  ethereumNodeTimeout: 10000,\r\n};\r\n","import Web3 from 'web3';\r\nimport {defaultEthereumConfig, EthereumConfig} from './config';\r\nimport {formatUnits, parseUnits} from 'ethers/lib/utils';\r\nimport {BigNumber} from 'ethers';\r\n\r\nexport function web3ProviderFrom(endpoint: string, config?: EthereumConfig): any {\r\n  const ethConfig = Object.assign(defaultEthereumConfig, config || {});\r\n\r\n  const providerClass = endpoint.includes('wss') ? Web3.providers.WebsocketProvider : Web3.providers.HttpProvider;\r\n\r\n  return new providerClass(endpoint, {\r\n    timeout: ethConfig.ethereumNodeTimeout,\r\n  });\r\n}\r\n\r\nexport function balanceToDecimal(s: string): string {\r\n  return formatUnits(s);\r\n}\r\n\r\nexport function decimalToBalance(d: string | number, decimals = 18): BigNumber {\r\n  return parseUnits(String(d), decimals);\r\n}\r\n","import {createAction} from '@reduxjs/toolkit';\r\n// import { ChainId } from '@uniswap/sdk';\r\nimport {ChainId} from '@pancakeswap/sdk';\r\n\r\nexport interface SerializableTransactionReceipt {\r\n  to: string;\r\n  from: string;\r\n  contractAddress: string;\r\n  transactionIndex: number;\r\n  blockHash: string;\r\n  transactionHash: string;\r\n  blockNumber: number;\r\n  status?: number;\r\n}\r\n\r\nexport const addTransaction = createAction<{\r\n  chainId: ChainId;\r\n  hash: string;\r\n  from: string;\r\n  approval?: {tokenAddress: string; spender: string};\r\n  summary?: string;\r\n}>('transactions/addTransaction');\r\n\r\nexport const clearAllTransactions = createAction<{chainId: ChainId}>('transactions/clearAllTransactions');\r\n\r\nexport const finalizeTransaction = createAction<{\r\n  chainId: ChainId;\r\n  hash: string;\r\n  receipt: SerializableTransactionReceipt;\r\n}>('transactions/finalizeTransaction');\r\n\r\nexport const checkedTransaction = createAction<{\r\n  chainId: ChainId;\r\n  hash: string;\r\n  blockNumber: number;\r\n}>('transactions/checkedTransaction');\r\n"],"sourceRoot":""}