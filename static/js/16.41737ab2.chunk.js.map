{"version":3,"sources":["hooks/useApproveTaxOffice.ts","hooks/useProvideBnbmFtmLP.ts","views/Liquidity/Liquidity.js","hooks/useApprove.ts"],"names":["ApprovalState","APPROVE_AMOUNT","ethers","constants","MaxUint256","APPROVE_BASE_AMOUNT","BigNumber","from","useApproveTaxOffice","bnbmFinance","useBnbmFinance","token","BNBM","pendingApproval","useHasPendingApproval","address","TAX_OFFICE_ADDR","currentAllowance","useAllowance","approvalState","useMemo","BNB","APPROVED","lt","PENDING","NOT_APPROVED","UNKNOWN","addTransaction","useTransactionAdder","approve","useCallback","a","console","error","response","summary","symbol","approval","tokenAddress","spender","useProvideBnbmFtmLP","handleTransactionReceipt","useHandleTransactionReceipt","onProvideBnbmFtmLP","ftmAmount","bnbmAmount","bnbmAmountBn","parseUnits","provideBnbmFtmLP","isNumeric","n","isNaN","parseFloat","isFinite","ProvideLiquidity","useState","setBnbmAmount","setFtmAmount","lpTokensAmount","setLpTokensAmount","bnbmStats","useWallet","balance","useBnbmStats","approveTaxOfficeStatus","approveTaxOffice","bnbmBalance","useTokenBalance","ftmBalance","BTC","toFixed","bnbmFtmLpStats","useLpStats","bnbmLPStats","bnbmPriceInBNB","Number","tokenInFtm","ftmPriceInBNBM","handleBnbmChange","e","currentTarget","value","quoteFromSpooky","handleFtmChange","tokenAmount","handleBnbmSelectMax","getDisplayBalance","handleFtmSelectMax","Page","Helmet","Typography","color","align","variant","gutterBottom","Grid","container","justify","Box","style","width","Alert","severity","marginBottom","href","rel","target","item","xs","sm","Paper","mt","borderRadius","p","TokenInput","onSelectMax","onChange","max","justifyContent","textAlign","Button","onClick","toString","margin","useApprove"],"mappings":"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","file":"static/js/16.41737ab2.chunk.js","sourcesContent":["import {BigNumber, ethers} from 'ethers';\r\nimport {useCallback, useMemo} from 'react';\r\nimport {useHasPendingApproval, useTransactionAdder} from '../state/transactions/hooks';\r\nimport useAllowance from './useAllowance';\r\nimport ERC20 from '../bnbm-finance/ERC20';\r\nimport {TAX_OFFICE_ADDR} from '../utils/constants';\r\nimport useBnbmFinance from './useBnbmFinance';\r\n\r\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\r\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\r\n\r\nexport enum ApprovalState {\r\n  UNKNOWN,\r\n  NOT_APPROVED,\r\n  PENDING,\r\n  APPROVED,\r\n}\r\n\r\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\r\nfunction useApproveTaxOffice(): [ApprovalState, () => Promise<void>] {\r\n  const bnbmFinance = useBnbmFinance();\r\n  let token: ERC20 = bnbmFinance.BNBM;\r\n  // if (zappingToken === BNB_TICKER) token = bnbmFinance.BNB;\r\n  // else if (zappingToken === BNBM_TICKER) token = bnbmFinance.BNBM;\r\n  // else if (zappingToken === SBNB_TICKER) token = bnbmFinance.SBNB;\r\n  const pendingApproval = useHasPendingApproval(token.address, TAX_OFFICE_ADDR);\r\n  const currentAllowance = useAllowance(token, TAX_OFFICE_ADDR, pendingApproval);\r\n\r\n  // check the current approval status\r\n  const approvalState: ApprovalState = useMemo(() => {\r\n    // we might not have enough data to know whether or not we need to approve\r\n    if (token === bnbmFinance.BNB) return ApprovalState.APPROVED;\r\n    if (!currentAllowance) return ApprovalState.UNKNOWN;\r\n\r\n    // amountToApprove will be defined if currentAllowance is\r\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT)\r\n      ? pendingApproval\r\n        ? ApprovalState.PENDING\r\n        : ApprovalState.NOT_APPROVED\r\n      : ApprovalState.APPROVED;\r\n  }, [currentAllowance, pendingApproval, token, bnbmFinance]);\r\n\r\n  const addTransaction = useTransactionAdder();\r\n\r\n  const approve = useCallback(async (): Promise<void> => {\r\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\r\n      console.error('approve was called unnecessarily');\r\n      return;\r\n    }\r\n\r\n    const response = await token.approve(TAX_OFFICE_ADDR, APPROVE_AMOUNT);\r\n    addTransaction(response, {\r\n      summary: `Approve ${token.symbol}`,\r\n      approval: {\r\n        tokenAddress: token.address,\r\n        spender: TAX_OFFICE_ADDR,\r\n      },\r\n    });\r\n  }, [approvalState, token, addTransaction]);\r\n\r\n  return [approvalState, approve];\r\n}\r\n\r\nexport default useApproveTaxOffice;\r\n","import {useCallback} from 'react';\r\nimport useBnbmFinance from './useBnbmFinance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\nimport {parseUnits} from 'ethers/lib/utils';\r\nimport {TAX_OFFICE_ADDR} from '../utils/constants';\r\n\r\nconst useProvideBnbmFtmLP = () => {\r\n  const bnbmFinance = useBnbmFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleProvideBnbmFtmLP = useCallback(\r\n    (ftmAmount: string, bnbmAmount: string) => {\r\n      const bnbmAmountBn = parseUnits(bnbmAmount);\r\n      handleTransactionReceipt(\r\n        bnbmFinance.provideBnbmFtmLP(ftmAmount, bnbmAmountBn),\r\n        `Provide BNBM-BTCB LP ${bnbmAmount} ${ftmAmount} using ${TAX_OFFICE_ADDR}`,\r\n      );\r\n    },\r\n    [bnbmFinance, handleTransactionReceipt],\r\n  );\r\n  return {onProvideBnbmFtmLP: handleProvideBnbmFtmLP};\r\n};\r\n\r\nexport default useProvideBnbmFtmLP;\r\n","import React, { useMemo, useState } from 'react';\r\nimport Page from '../../components/Page';\r\nimport useLpStats from '../../hooks/useLpStats';\r\nimport { Box, Button, Grid, Paper, Typography } from '@material-ui/core';\r\nimport useBnbmStats from '../../hooks/useBondStats';\r\nimport TokenInput from '../../components/TokenInput';\r\nimport useBnbmFinance from '../../hooks/useBnbmFinance';\r\nimport { useWallet } from 'use-wallet';\r\nimport useTokenBalance from '../../hooks/useTokenBalance';\r\nimport { getDisplayBalance } from '../../utils/formatBalance';\r\nimport useApproveTaxOffice from '../../hooks/useApproveTaxOffice';\r\nimport { ApprovalState } from '../../hooks/useApprove';\r\nimport useProvideBnbmFtmLP from '../../hooks/useProvideBnbmFtmLP';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { Helmet } from 'react-helmet';\r\nimport {BackgroundImage} from '../Home/Home.js';\r\n\r\nfunction isNumeric(n) {\r\n  return !isNaN(parseFloat(n)) && isFinite(n);\r\n}\r\nconst TITLE = 'bnbm.finance |'\r\n\r\nconst ProvideLiquidity = () => {\r\n  const [bnbmAmount, setBnbmAmount] = useState(0);\r\n  const [ftmAmount, setFtmAmount] = useState(0);\r\n  const [lpTokensAmount, setLpTokensAmount] = useState(0);\r\n  const { balance } = useWallet();\r\n  const bnbmStats = useBnbmStats();\r\n  const bnbmFinance = useBnbmFinance();\r\n  const [approveTaxOfficeStatus, approveTaxOffice] = useApproveTaxOffice();\r\n  const bnbmBalance = useTokenBalance(bnbmFinance.BNBM);\r\n  const btcBalance = useTokenBalance(bnbmFinance.BTC);\r\n\r\n  const ftmBalance = (btcBalance / 1e18).toFixed(4);\r\n  const { onProvideBnbmFtmLP } = useProvideBnbmFtmLP();\r\n  const bnbmFtmLpStats = useLpStats('BNBM-BNB-LP');\r\n\r\n  const bnbmLPStats = useMemo(() => (bnbmFtmLpStats ? bnbmFtmLpStats : null), [bnbmFtmLpStats]);\r\n  const bnbmPriceInBNB = useMemo(() => (bnbmStats ? Number(bnbmStats.tokenInFtm).toFixed(2) : null), [bnbmStats]);\r\n  const ftmPriceInBNBM = useMemo(() => (bnbmStats ? Number(1 / bnbmStats.tokenInFtm).toFixed(2) : null), [bnbmStats]);\r\n  // const classes = useStyles();\r\n\r\n  const handleBnbmChange = async (e) => {\r\n    if (e.currentTarget.value === '' || e.currentTarget.value === 0) {\r\n      setBnbmAmount(e.currentTarget.value);\r\n    }\r\n    if (!isNumeric(e.currentTarget.value)) return;\r\n    setBnbmAmount(e.currentTarget.value);\r\n    const quoteFromSpooky = await bnbmFinance.quoteFromSpooky(e.currentTarget.value, 'BNBM');\r\n    setFtmAmount(quoteFromSpooky);\r\n    setLpTokensAmount(quoteFromSpooky / bnbmLPStats.ftmAmount);\r\n  };\r\n\r\n  const handleFtmChange = async (e) => {\r\n    if (e.currentTarget.value === '' || e.currentTarget.value === 0) {\r\n      setFtmAmount(e.currentTarget.value);\r\n    }\r\n    if (!isNumeric(e.currentTarget.value)) return;\r\n    setFtmAmount(e.currentTarget.value);\r\n    const quoteFromSpooky = await bnbmFinance.quoteFromSpooky(e.currentTarget.value, 'BTCB');\r\n    setBnbmAmount(quoteFromSpooky);\r\n\r\n    setLpTokensAmount(quoteFromSpooky / bnbmLPStats.tokenAmount);\r\n  };\r\n  const handleBnbmSelectMax = async () => {\r\n    const quoteFromSpooky = await bnbmFinance.quoteFromSpooky(getDisplayBalance(bnbmBalance), 'BNBM');\r\n    setBnbmAmount(getDisplayBalance(bnbmBalance));\r\n    setFtmAmount(quoteFromSpooky);\r\n    setLpTokensAmount(quoteFromSpooky / bnbmLPStats.ftmAmount);\r\n  };\r\n  const handleFtmSelectMax = async () => {\r\n    const quoteFromSpooky = await bnbmFinance.quoteFromSpooky(ftmBalance, 'BNB');\r\n    setFtmAmount(ftmBalance);\r\n    setBnbmAmount(quoteFromSpooky);\r\n    setLpTokensAmount(ftmBalance / bnbmLPStats.ftmAmount);\r\n  };\r\n  return (\r\n\r\n    <Page>\r\n      <Helmet>\r\n        <title>{TITLE}</title>\r\n      </Helmet>\r\n      <BackgroundImage />\r\n      <Typography color=\"textPrimary\" align=\"center\" variant=\"h3\" gutterBottom>\r\n        Provide Liquidity\r\n      </Typography>\r\n\r\n      <Grid container justify=\"center\">\r\n        <Box style={{ width: '600px' }}>\r\n          <Alert variant=\"filled\" severity=\"warning\" style={{ marginBottom: '10px' }}>\r\n            <b>\r\n              This and{' '}\r\n              <a href=\"https://pancakeswap.finance/\" rel=\"noopener noreferrer\" target=\"_blank\">\r\n                Pancakeswap\r\n              </a>{' '}\r\n              are the only ways to provide Liquidity on BNBM-BTCB pair without paying tax.\r\n            </b>\r\n          </Alert>\r\n          <Grid item xs={12} sm={12}>\r\n            <Paper>\r\n              <Box mt={4}>\r\n                <Grid item xs={12} sm={12} style={{ borderRadius: 15 }}>\r\n                  <Box p={4}>\r\n                    <Grid container>\r\n                      <Grid item xs={12}>\r\n                        <TokenInput\r\n                          onSelectMax={handleBnbmSelectMax}\r\n                          onChange={handleBnbmChange}\r\n                          value={bnbmAmount}\r\n                          max={getDisplayBalance(bnbmBalance)}\r\n                          symbol={'BNBM'}\r\n                        ></TokenInput>\r\n                      </Grid>\r\n                      <Grid item xs={12}>\r\n                        <TokenInput\r\n                          onSelectMax={handleFtmSelectMax}\r\n                          onChange={handleFtmChange}\r\n                          value={ftmAmount}\r\n                          max={ftmBalance}\r\n                          symbol={'BTCB'}\r\n                        ></TokenInput>\r\n                      </Grid>\r\n                      <Grid item xs={12}>\r\n                        <p>1 BNBM = {bnbmPriceInBNB} BNB</p>\r\n                        <p>1 BNB = {ftmPriceInBNBM} BNBM</p>\r\n                        <p>LP tokens ≈ {lpTokensAmount.toFixed(2)}</p>\r\n                      </Grid>\r\n                      <Grid xs={12} justifyContent=\"center\" style={{ textAlign: 'center' }}>\r\n                        {approveTaxOfficeStatus === ApprovalState.APPROVED ? (\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            onClick={() => onProvideBnbmFtmLP(ftmAmount.toString(), bnbmAmount.toString())}\r\n                            color=\"primary\"\r\n                            style={{ margin: '0 10px', color: '#fff' }}\r\n                          >\r\n                            Supply\r\n                          </Button>\r\n                        ) : (\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            onClick={() => approveTaxOffice()}\r\n                            color=\"secondary\"\r\n                            style={{ margin: '0 10px' }}\r\n                          >\r\n                            Approve\r\n                          </Button>\r\n                        )}\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Box>\r\n                </Grid>\r\n              </Box>\r\n            </Paper>\r\n          </Grid>\r\n        </Box>\r\n      </Grid>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default ProvideLiquidity;\r\n","import {BigNumber, ethers} from 'ethers';\r\nimport {useCallback, useMemo} from 'react';\r\nimport {useHasPendingApproval, useTransactionAdder} from '../state/transactions/hooks';\r\nimport useAllowance from './useAllowance';\r\nimport ERC20 from '../bnbm-finance/ERC20';\r\n\r\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\r\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\r\n\r\nexport enum ApprovalState {\r\n  UNKNOWN,\r\n  NOT_APPROVED,\r\n  PENDING,\r\n  APPROVED,\r\n}\r\n\r\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\r\nfunction useApprove(token: ERC20, spender: string): [ApprovalState, () => Promise<void>] {\r\n  const pendingApproval = useHasPendingApproval(token.address, spender);\r\n  const currentAllowance = useAllowance(token, spender, pendingApproval);\r\n\r\n  // check the current approval status\r\n  const approvalState: ApprovalState = useMemo(() => {\r\n    // we might not have enough data to know whether or not we need to approve\r\n    if (!currentAllowance) return ApprovalState.UNKNOWN;\r\n\r\n    // amountToApprove will be defined if currentAllowance is\r\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT)\r\n      ? pendingApproval\r\n        ? ApprovalState.PENDING\r\n        : ApprovalState.NOT_APPROVED\r\n      : ApprovalState.APPROVED;\r\n  }, [currentAllowance, pendingApproval]);\r\n\r\n  const addTransaction = useTransactionAdder();\r\n\r\n  const approve = useCallback(async (): Promise<void> => {\r\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\r\n      console.error('approve was called unnecessarily');\r\n      return;\r\n    }\r\n\r\n    const response = await token.approve(spender, APPROVE_AMOUNT);\r\n    addTransaction(response, {\r\n      summary: `Approve ${token.symbol}`,\r\n      approval: {\r\n        tokenAddress: token.address,\r\n        spender: spender,\r\n      },\r\n    });\r\n  }, [approvalState, token, spender, addTransaction]);\r\n\r\n  return [approvalState, approve];\r\n}\r\n\r\nexport default useApprove;\r\n"],"sourceRoot":""}